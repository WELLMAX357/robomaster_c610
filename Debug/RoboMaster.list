
RoboMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b18  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007d18  08007d18  00017d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d78  08007d78  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007d78  08007d78  00017d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d80  08007d80  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d80  08007d80  00017d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d84  08007d84  00017d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051d4  20000060  08007de8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005234  08007de8  00025234  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020891  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004118  00000000  00000000  00040962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001988  00000000  00000000  00044a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013e2  00000000  00000000  00046408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003f33  00000000  00000000  000477ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d041  00000000  00000000  0004b71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010a3b6  00000000  00000000  0006875e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006fac  00000000  00000000  00172b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00179ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08007d00 	.word	0x08007d00

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08007d00 	.word	0x08007d00

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <set_raw_data>:

c610_raw_data _c610_raw_data[4] = {0};
c610_data _c610_data[4] = {0};

void set_raw_data(uint8_t RxData[], uint8_t id)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	70fb      	strb	r3, [r7, #3]
    _c610_raw_data[id].raw_angle = (uint16_t) (RxData[0] << 8 | RxData[1]);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	021b      	lsls	r3, r3, #8
 800054e:	b21a      	sxth	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3301      	adds	r3, #1
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	b21b      	sxth	r3, r3
 8000558:	4313      	orrs	r3, r2
 800055a:	b21b      	sxth	r3, r3
 800055c:	78fa      	ldrb	r2, [r7, #3]
 800055e:	b298      	uxth	r0, r3
 8000560:	491b      	ldr	r1, [pc, #108]	; (80005d0 <set_raw_data+0x94>)
 8000562:	4613      	mov	r3, r2
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	4413      	add	r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	440b      	add	r3, r1
 800056c:	4602      	mov	r2, r0
 800056e:	801a      	strh	r2, [r3, #0]
    _c610_raw_data[id].raw_speed = (uint16_t) (RxData[2] << 8 | RxData[3]);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3302      	adds	r3, #2
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	021b      	lsls	r3, r3, #8
 8000578:	b219      	sxth	r1, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3303      	adds	r3, #3
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	b21b      	sxth	r3, r3
 8000582:	78fa      	ldrb	r2, [r7, #3]
 8000584:	430b      	orrs	r3, r1
 8000586:	b218      	sxth	r0, r3
 8000588:	4911      	ldr	r1, [pc, #68]	; (80005d0 <set_raw_data+0x94>)
 800058a:	4613      	mov	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	4413      	add	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	440b      	add	r3, r1
 8000594:	3302      	adds	r3, #2
 8000596:	4602      	mov	r2, r0
 8000598:	801a      	strh	r2, [r3, #0]
    _c610_raw_data[id].raw_torque_current = (uint16_t) (RxData[4] << 8 | RxData[5]);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3304      	adds	r3, #4
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	021b      	lsls	r3, r3, #8
 80005a2:	b219      	sxth	r1, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3305      	adds	r3, #5
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b21b      	sxth	r3, r3
 80005ac:	78fa      	ldrb	r2, [r7, #3]
 80005ae:	430b      	orrs	r3, r1
 80005b0:	b218      	sxth	r0, r3
 80005b2:	4907      	ldr	r1, [pc, #28]	; (80005d0 <set_raw_data+0x94>)
 80005b4:	4613      	mov	r3, r2
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	4413      	add	r3, r2
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	440b      	add	r3, r1
 80005be:	3304      	adds	r3, #4
 80005c0:	4602      	mov	r2, r0
 80005c2:	801a      	strh	r2, [r3, #0]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	2000007c 	.word	0x2000007c

080005d4 <processing_data>:

void processing_data(uint8_t id)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
    if (_c610_data[id].offset_initialized == false) {
 80005de:	79fa      	ldrb	r2, [r7, #7]
 80005e0:	4985      	ldr	r1, [pc, #532]	; (80007f8 <processing_data+0x224>)
 80005e2:	4613      	mov	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	4413      	add	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	440b      	add	r3, r1
 80005ec:	3312      	adds	r3, #18
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	f083 0301 	eor.w	r3, r3, #1
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d02d      	beq.n	8000656 <processing_data+0x82>
        _c610_data[id].offset_angle = _c610_raw_data[id].raw_angle;
 80005fa:	79f9      	ldrb	r1, [r7, #7]
 80005fc:	79fa      	ldrb	r2, [r7, #7]
 80005fe:	487f      	ldr	r0, [pc, #508]	; (80007fc <processing_data+0x228>)
 8000600:	460b      	mov	r3, r1
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	440b      	add	r3, r1
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	4403      	add	r3, r0
 800060a:	8818      	ldrh	r0, [r3, #0]
 800060c:	497a      	ldr	r1, [pc, #488]	; (80007f8 <processing_data+0x224>)
 800060e:	4613      	mov	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	440b      	add	r3, r1
 8000618:	3310      	adds	r3, #16
 800061a:	4602      	mov	r2, r0
 800061c:	801a      	strh	r2, [r3, #0]
        _c610_data[id].prev_angle = _c610_raw_data[id].raw_angle;
 800061e:	79f9      	ldrb	r1, [r7, #7]
 8000620:	79fa      	ldrb	r2, [r7, #7]
 8000622:	4876      	ldr	r0, [pc, #472]	; (80007fc <processing_data+0x228>)
 8000624:	460b      	mov	r3, r1
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	440b      	add	r3, r1
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	4403      	add	r3, r0
 800062e:	8818      	ldrh	r0, [r3, #0]
 8000630:	4971      	ldr	r1, [pc, #452]	; (80007f8 <processing_data+0x224>)
 8000632:	4613      	mov	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	440b      	add	r3, r1
 800063c:	330e      	adds	r3, #14
 800063e:	4602      	mov	r2, r0
 8000640:	801a      	strh	r2, [r3, #0]
        _c610_data[id].offset_initialized = true;
 8000642:	79fa      	ldrb	r2, [r7, #7]
 8000644:	496c      	ldr	r1, [pc, #432]	; (80007f8 <processing_data+0x224>)
 8000646:	4613      	mov	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	440b      	add	r3, r1
 8000650:	3312      	adds	r3, #18
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
    }

    int16_t diff_angle = _c610_raw_data[id].raw_angle - _c610_data[id].prev_angle;
 8000656:	79fa      	ldrb	r2, [r7, #7]
 8000658:	4968      	ldr	r1, [pc, #416]	; (80007fc <processing_data+0x228>)
 800065a:	4613      	mov	r3, r2
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	4413      	add	r3, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	440b      	add	r3, r1
 8000664:	8819      	ldrh	r1, [r3, #0]
 8000666:	79fa      	ldrb	r2, [r7, #7]
 8000668:	4863      	ldr	r0, [pc, #396]	; (80007f8 <processing_data+0x224>)
 800066a:	4613      	mov	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	4403      	add	r3, r0
 8000674:	330e      	adds	r3, #14
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	1acb      	subs	r3, r1, r3
 800067a:	b29b      	uxth	r3, r3
 800067c:	81fb      	strh	r3, [r7, #14]
    if (diff_angle > 4096) {
 800067e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000686:	dd17      	ble.n	80006b8 <processing_data+0xe4>
        _c610_data[id].rotation_count--;
 8000688:	79fa      	ldrb	r2, [r7, #7]
 800068a:	495b      	ldr	r1, [pc, #364]	; (80007f8 <processing_data+0x224>)
 800068c:	4613      	mov	r3, r2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4413      	add	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	440b      	add	r3, r1
 8000696:	330c      	adds	r3, #12
 8000698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069c:	b29b      	uxth	r3, r3
 800069e:	3b01      	subs	r3, #1
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	b218      	sxth	r0, r3
 80006a4:	4954      	ldr	r1, [pc, #336]	; (80007f8 <processing_data+0x224>)
 80006a6:	4613      	mov	r3, r2
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4413      	add	r3, r2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	440b      	add	r3, r1
 80006b0:	330c      	adds	r3, #12
 80006b2:	4602      	mov	r2, r0
 80006b4:	801a      	strh	r2, [r3, #0]
 80006b6:	e01b      	b.n	80006f0 <processing_data+0x11c>
    } else if (diff_angle < -4096) {
 80006b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006bc:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80006c0:	da16      	bge.n	80006f0 <processing_data+0x11c>
        _c610_data[id].rotation_count++;
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	494c      	ldr	r1, [pc, #304]	; (80007f8 <processing_data+0x224>)
 80006c6:	4613      	mov	r3, r2
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4413      	add	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	440b      	add	r3, r1
 80006d0:	330c      	adds	r3, #12
 80006d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	3301      	adds	r3, #1
 80006da:	b29b      	uxth	r3, r3
 80006dc:	b218      	sxth	r0, r3
 80006de:	4946      	ldr	r1, [pc, #280]	; (80007f8 <processing_data+0x224>)
 80006e0:	4613      	mov	r3, r2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	440b      	add	r3, r1
 80006ea:	330c      	adds	r3, #12
 80006ec:	4602      	mov	r2, r0
 80006ee:	801a      	strh	r2, [r3, #0]
    }
    _c610_data[id].angle = _c610_data[id].rotation_count * 6.28318f + (_c610_raw_data[id].raw_angle - _c610_data[id].offset_angle) * 6.28318f / 8192;
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	4941      	ldr	r1, [pc, #260]	; (80007f8 <processing_data+0x224>)
 80006f4:	4613      	mov	r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	4413      	add	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	440b      	add	r3, r1
 80006fe:	330c      	adds	r3, #12
 8000700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800070c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000800 <processing_data+0x22c>
 8000710:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000714:	79fa      	ldrb	r2, [r7, #7]
 8000716:	4939      	ldr	r1, [pc, #228]	; (80007fc <processing_data+0x228>)
 8000718:	4613      	mov	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4413      	add	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	440b      	add	r3, r1
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	79fa      	ldrb	r2, [r7, #7]
 8000728:	4933      	ldr	r1, [pc, #204]	; (80007f8 <processing_data+0x224>)
 800072a:	4613      	mov	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	440b      	add	r3, r1
 8000734:	3310      	adds	r3, #16
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	1ac3      	subs	r3, r0, r3
 800073a:	ee07 3a90 	vmov	s15, r3
 800073e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000742:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8000800 <processing_data+0x22c>
 8000746:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800074a:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8000804 <processing_data+0x230>
 800074e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000752:	79fa      	ldrb	r2, [r7, #7]
 8000754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000758:	4927      	ldr	r1, [pc, #156]	; (80007f8 <processing_data+0x224>)
 800075a:	4613      	mov	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	440b      	add	r3, r1
 8000764:	edc3 7a00 	vstr	s15, [r3]
    _c610_data[id].speed = _c610_raw_data[id].raw_speed;
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	4924      	ldr	r1, [pc, #144]	; (80007fc <processing_data+0x228>)
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	440b      	add	r3, r1
 8000776:	3302      	adds	r3, #2
 8000778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800077c:	79fa      	ldrb	r2, [r7, #7]
 800077e:	ee07 3a90 	vmov	s15, r3
 8000782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000786:	491c      	ldr	r1, [pc, #112]	; (80007f8 <processing_data+0x224>)
 8000788:	4613      	mov	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	440b      	add	r3, r1
 8000792:	3304      	adds	r3, #4
 8000794:	edc3 7a00 	vstr	s15, [r3]
    _c610_data[id].torque_current = _c610_raw_data[id].raw_torque_current;
 8000798:	79fa      	ldrb	r2, [r7, #7]
 800079a:	4918      	ldr	r1, [pc, #96]	; (80007fc <processing_data+0x228>)
 800079c:	4613      	mov	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4413      	add	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	440b      	add	r3, r1
 80007a6:	3304      	adds	r3, #4
 80007a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ac:	79fa      	ldrb	r2, [r7, #7]
 80007ae:	ee07 3a90 	vmov	s15, r3
 80007b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007b6:	4910      	ldr	r1, [pc, #64]	; (80007f8 <processing_data+0x224>)
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	440b      	add	r3, r1
 80007c2:	3308      	adds	r3, #8
 80007c4:	edc3 7a00 	vstr	s15, [r3]

    _c610_data[id].prev_angle = _c610_raw_data[id].raw_angle;
 80007c8:	79f9      	ldrb	r1, [r7, #7]
 80007ca:	79fa      	ldrb	r2, [r7, #7]
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <processing_data+0x228>)
 80007ce:	460b      	mov	r3, r1
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	440b      	add	r3, r1
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	4403      	add	r3, r0
 80007d8:	8818      	ldrh	r0, [r3, #0]
 80007da:	4907      	ldr	r1, [pc, #28]	; (80007f8 <processing_data+0x224>)
 80007dc:	4613      	mov	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	440b      	add	r3, r1
 80007e6:	330e      	adds	r3, #14
 80007e8:	4602      	mov	r2, r0
 80007ea:	801a      	strh	r2, [r3, #0]
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	20000094 	.word	0x20000094
 80007fc:	2000007c 	.word	0x2000007c
 8000800:	40c90fd0 	.word	0x40c90fd0
 8000804:	46000000 	.word	0x46000000

08000808 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	f107 0214 	add.w	r2, r7, #20
 8000818:	2100      	movs	r1, #0
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f001 f84b 	bl	80018b6 <HAL_CAN_GetRxMessage>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d10c      	bne.n	8000840 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
    {
        set_raw_data(RxData, RxHeader.StdId - 0x200);
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fe83 	bl	800053c <set_raw_data>
        processing_data(RxHeader.StdId - 0x200);
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff feca 	bl	80005d4 <processing_data>
    }
}
 8000840:	bf00      	nop
 8000842:	3730      	adds	r7, #48	; 0x30
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084c:	f000 fcb1 	bl	80011b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000850:	f000 f83c 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000854:	f000 f95a 	bl	8000b0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000858:	f000 f8fa 	bl	8000a50 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800085c:	f000 f928 	bl	8000ab0 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000860:	f000 f8a4 	bl	80009ac <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000864:	4814      	ldr	r0, [pc, #80]	; (80008b8 <main+0x70>)
 8000866:	f000 fedd 	bl	8001624 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800086a:	2102      	movs	r1, #2
 800086c:	4812      	ldr	r0, [pc, #72]	; (80008b8 <main+0x70>)
 800086e:	f001 f934 	bl	8001ada <HAL_CAN_ActivateNotification>

    if (0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan1)){
 8000872:	4811      	ldr	r0, [pc, #68]	; (80008b8 <main+0x70>)
 8000874:	f000 ffea 	bl	800184c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d00f      	beq.n	800089e <main+0x56>
        TxHeader.StdId = 0x200;
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <main+0x74>)
 8000880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000884:	601a      	str	r2, [r3, #0]
        TxHeader.RTR = CAN_RTR_DATA;
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <main+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
        TxHeader.IDE = CAN_ID_STD;
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <main+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
        TxHeader.DLC = 8;
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <main+0x74>)
 8000894:	2208      	movs	r2, #8
 8000896:	611a      	str	r2, [r3, #16]
        TxHeader.TransmitGlobalTime = DISABLE;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <main+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	751a      	strb	r2, [r3, #20]
    }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800089e:	f004 fb4d 	bl	8004f3c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008a2:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <main+0x78>)
 80008a4:	2100      	movs	r1, #0
 80008a6:	4807      	ldr	r0, [pc, #28]	; (80008c4 <main+0x7c>)
 80008a8:	f004 fbb2 	bl	8005010 <osThreadNew>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <main+0x80>)
 80008b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008b2:	f004 fb77 	bl	8004fa4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <main+0x6e>
 80008b8:	200000e4 	.word	0x200000e4
 80008bc:	200006a0 	.word	0x200006a0
 80008c0:	08007d3c 	.word	0x08007d3c
 80008c4:	08000cd9 	.word	0x08000cd9
 80008c8:	2000069c 	.word	0x2000069c

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	; 0x50
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2234      	movs	r2, #52	; 0x34
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f007 f926 	bl	8007b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008f0:	f001 ff52 	bl	8002798 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <SystemClock_Config+0xd8>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	4a2a      	ldr	r2, [pc, #168]	; (80009a4 <SystemClock_Config+0xd8>)
 80008fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000900:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <SystemClock_Config+0xd8>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090c:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <SystemClock_Config+0xdc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a25      	ldr	r2, [pc, #148]	; (80009a8 <SystemClock_Config+0xdc>)
 8000912:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <SystemClock_Config+0xdc>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000924:	2301      	movs	r3, #1
 8000926:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000928:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800092c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000936:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800093c:	23d8      	movs	r3, #216	; 0xd8
 800093e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000940:	2302      	movs	r3, #2
 8000942:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000944:	2309      	movs	r3, #9
 8000946:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4618      	mov	r0, r3
 8000952:	f001 ff81 	bl	8002858 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800095c:	f000 f9f6 	bl	8000d4c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000960:	f001 ff2a 	bl	80027b8 <HAL_PWREx_EnableOverDrive>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800096a:	f000 f9ef 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096e:	230f      	movs	r3, #15
 8000970:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000972:	2302      	movs	r3, #2
 8000974:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800097a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800097e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000984:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	2107      	movs	r1, #7
 800098c:	4618      	mov	r0, r3
 800098e:	f002 fa11 	bl	8002db4 <HAL_RCC_ClockConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000998:	f000 f9d8 	bl	8000d4c <Error_Handler>
  }
}
 800099c:	bf00      	nop
 800099e:	3750      	adds	r7, #80	; 0x50
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40007000 	.word	0x40007000

080009ac <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <MX_CAN1_Init+0x9c>)
 80009b4:	4a25      	ldr	r2, [pc, #148]	; (8000a4c <MX_CAN1_Init+0xa0>)
 80009b6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80009b8:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <MX_CAN1_Init+0x9c>)
 80009ba:	2203      	movs	r2, #3
 80009bc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_CAN1_Init+0x9c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <MX_CAN1_Init+0x9c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_CAN1_Init+0x9c>)
 80009cc:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80009d0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_CAN1_Init+0x9c>)
 80009d4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80009d8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_CAN1_Init+0x9c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_CAN1_Init+0x9c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_CAN1_Init+0x9c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_CAN1_Init+0x9c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_CAN1_Init+0x9c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_CAN1_Init+0x9c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009fe:	4812      	ldr	r0, [pc, #72]	; (8000a48 <MX_CAN1_Init+0x9c>)
 8000a00:	f000 fc28 	bl	8001254 <HAL_CAN_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000a0a:	f000 f99f 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
    CAN_FilterTypeDef filter;
    filter.FilterIdHigh         = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
    filter.FilterIdLow          = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
    filter.FilterMaskIdHigh     = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
    filter.FilterMaskIdLow      = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
    filter.FilterScale          = CAN_FILTERSCALE_32BIT;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	61fb      	str	r3, [r7, #28]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
    filter.FilterBank           = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
    filter.FilterMode           = CAN_FILTERMODE_IDMASK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
    filter.SlaveStartFilterBank = 14;
 8000a2e:	230e      	movs	r3, #14
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
    filter.FilterActivation     = ENABLE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
    HAL_CAN_ConfigFilter(&hcan1, &filter);
 8000a36:	463b      	mov	r3, r7
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4803      	ldr	r0, [pc, #12]	; (8000a48 <MX_CAN1_Init+0x9c>)
 8000a3c:	f000 fd06 	bl	800144c <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200000e4 	.word	0x200000e4
 8000a4c:	40006400 	.word	0x40006400

08000a50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a56:	4a15      	ldr	r2, [pc, #84]	; (8000aac <MX_USART3_UART_Init+0x5c>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_USART3_UART_Init+0x58>)
 8000a94:	f003 faee 	bl	8004074 <HAL_UART_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a9e:	f000 f955 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000010c 	.word	0x2000010c
 8000aac:	40004800 	.word	0x40004800

08000ab0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000aba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abe:	2206      	movs	r2, #6
 8000ac0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af4:	f001 fd07 	bl	8002506 <HAL_PCD_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000afe:	f000 f925 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000194 	.word	0x20000194

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	4b68      	ldr	r3, [pc, #416]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a67      	ldr	r2, [pc, #412]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b65      	ldr	r3, [pc, #404]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3a:	4b62      	ldr	r3, [pc, #392]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a61      	ldr	r2, [pc, #388]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b5f      	ldr	r3, [pc, #380]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b5c      	ldr	r3, [pc, #368]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a5b      	ldr	r2, [pc, #364]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b59      	ldr	r3, [pc, #356]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4b56      	ldr	r3, [pc, #344]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a55      	ldr	r2, [pc, #340]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b53      	ldr	r3, [pc, #332]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b82:	4b50      	ldr	r3, [pc, #320]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a4f      	ldr	r2, [pc, #316]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b88:	f043 0308 	orr.w	r3, r3, #8
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b4d      	ldr	r3, [pc, #308]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b9a:	4b4a      	ldr	r3, [pc, #296]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a49      	ldr	r2, [pc, #292]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b47      	ldr	r3, [pc, #284]	; (8000cc4 <MX_GPIO_Init+0x1b8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bb8:	4843      	ldr	r0, [pc, #268]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000bba:	f001 fc71 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2140      	movs	r1, #64	; 0x40
 8000bc2:	4842      	ldr	r0, [pc, #264]	; (8000ccc <MX_GPIO_Init+0x1c0>)
 8000bc4:	f001 fc6c 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	483c      	ldr	r0, [pc, #240]	; (8000cd0 <MX_GPIO_Init+0x1c4>)
 8000be0:	f001 fab2 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000be4:	2332      	movs	r3, #50	; 0x32
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf4:	230b      	movs	r3, #11
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4834      	ldr	r0, [pc, #208]	; (8000cd0 <MX_GPIO_Init+0x1c4>)
 8000c00:	f001 faa2 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c04:	2386      	movs	r3, #134	; 0x86
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c14:	230b      	movs	r3, #11
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	482d      	ldr	r0, [pc, #180]	; (8000cd4 <MX_GPIO_Init+0x1c8>)
 8000c20:	f001 fa92 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c24:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4822      	ldr	r0, [pc, #136]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000c3e:	f001 fa83 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c54:	230b      	movs	r3, #11
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481a      	ldr	r0, [pc, #104]	; (8000cc8 <MX_GPIO_Init+0x1bc>)
 8000c60:	f001 fa72 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c64:	2340      	movs	r3, #64	; 0x40
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4814      	ldr	r0, [pc, #80]	; (8000ccc <MX_GPIO_Init+0x1c0>)
 8000c7c:	f001 fa64 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	480e      	ldr	r0, [pc, #56]	; (8000ccc <MX_GPIO_Init+0x1c0>)
 8000c94:	f001 fa58 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000caa:	230b      	movs	r3, #11
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_GPIO_Init+0x1c0>)
 8000cb6:	f001 fa47 	bl	8002148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cba:	bf00      	nop
 8000cbc:	3730      	adds	r7, #48	; 0x30
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020400 	.word	0x40020400
 8000ccc:	40021800 	.word	0x40021800
 8000cd0:	40020800 	.word	0x40020800
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  int current = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  TxData[0] = current >> 8;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	121b      	asrs	r3, r3, #8
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <StartDefaultTask+0x3c>)
 8000cec:	701a      	strb	r2, [r3, #0]
  TxData[1] = current;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <StartDefaultTask+0x3c>)
 8000cf4:	705a      	strb	r2, [r3, #1]
  /* Infinite loop */
  for(;;)
  {
      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <StartDefaultTask+0x40>)
 8000cfa:	f001 fbea 	bl	80024d2 <HAL_GPIO_TogglePin>
      HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <StartDefaultTask+0x44>)
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <StartDefaultTask+0x3c>)
 8000d02:	4907      	ldr	r1, [pc, #28]	; (8000d20 <StartDefaultTask+0x48>)
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <StartDefaultTask+0x4c>)
 8000d06:	f000 fcd1 	bl	80016ac <HAL_CAN_AddTxMessage>
      osDelay(100);
 8000d0a:	2064      	movs	r0, #100	; 0x64
 8000d0c:	f004 fa26 	bl	800515c <osDelay>
      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d10:	e7f1      	b.n	8000cf6 <StartDefaultTask+0x1e>
 8000d12:	bf00      	nop
 8000d14:	200006bc 	.word	0x200006bc
 8000d18:	40020400 	.word	0x40020400
 8000d1c:	200006b8 	.word	0x200006b8
 8000d20:	200006a0 	.word	0x200006a0
 8000d24:	200000e4 	.word	0x200000e4

08000d28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d3a:	f000 fa47 	bl	80011cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40001000 	.word	0x40001000

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	210f      	movs	r1, #15
 8000d92:	f06f 0001 	mvn.w	r0, #1
 8000d96:	f001 f9ad 	bl	80020f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <HAL_CAN_MspInit+0x8c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d12f      	bne.n	8000e2a <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <HAL_CAN_MspInit+0x90>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <HAL_CAN_MspInit+0x90>)
 8000dd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_CAN_MspInit+0x90>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_CAN_MspInit+0x90>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_CAN_MspInit+0x90>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_CAN_MspInit+0x90>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e0a:	2309      	movs	r3, #9
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <HAL_CAN_MspInit+0x94>)
 8000e16:	f001 f997 	bl	8002148 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	2014      	movs	r0, #20
 8000e20:	f001 f968 	bl	80020f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e24:	2014      	movs	r0, #20
 8000e26:	f001 f981 	bl	800212c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40006400 	.word	0x40006400
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020c00 	.word	0x40020c00

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0ae      	sub	sp, #184	; 0xb8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2290      	movs	r2, #144	; 0x90
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f006 fe63 	bl	8007b2c <memset>
  if(huart->Instance==USART3)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <HAL_UART_MspInit+0xb4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d13c      	bne.n	8000eea <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e74:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f002 f9f0 	bl	8003264 <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e8a:	f7ff ff5f 	bl	8000d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000eac:	f043 0308 	orr.w	r3, r3, #8
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_UART_MspInit+0xb8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ebe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ede:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_UART_MspInit+0xbc>)
 8000ee6:	f001 f92f 	bl	8002148 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	37b8      	adds	r7, #184	; 0xb8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40004800 	.word	0x40004800
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020c00 	.word	0x40020c00

08000f00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0ae      	sub	sp, #184	; 0xb8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2290      	movs	r2, #144	; 0x90
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f006 fe03 	bl	8007b2c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f2e:	d159      	bne.n	8000fe4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f34:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 f98f 	bl	8003264 <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f4c:	f7ff fefe 	bl	8000d4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b26      	ldr	r3, [pc, #152]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4a25      	ldr	r2, [pc, #148]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f68:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f82:	230a      	movs	r3, #10
 8000f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <HAL_PCD_MspInit+0xf0>)
 8000f90:	f001 f8da 	bl	8002148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fac:	4619      	mov	r1, r3
 8000fae:	4810      	ldr	r0, [pc, #64]	; (8000ff0 <HAL_PCD_MspInit+0xf0>)
 8000fb0:	f001 f8ca 	bl	8002148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb8:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fbe:	6353      	str	r3, [r2, #52]	; 0x34
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd6:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <HAL_PCD_MspInit+0xec>)
 8000fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	37b8      	adds	r7, #184	; 0xb8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020000 	.word	0x40020000

08000ff4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	; 0x38
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001004:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <HAL_InitTick+0xe0>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <HAL_InitTick+0xe0>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <HAL_InitTick+0xe0>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 0310 	and.w	r3, r3, #16
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800101c:	f107 0210 	add.w	r2, r7, #16
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f002 f8ea 	bl	8003200 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001032:	2b00      	cmp	r3, #0
 8001034:	d103      	bne.n	800103e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001036:	f002 f8bb 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 800103a:	6378      	str	r0, [r7, #52]	; 0x34
 800103c:	e004      	b.n	8001048 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800103e:	f002 f8b7 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 8001042:	4603      	mov	r3, r0
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104a:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <HAL_InitTick+0xe4>)
 800104c:	fba2 2303 	umull	r2, r3, r2, r3
 8001050:	0c9b      	lsrs	r3, r3, #18
 8001052:	3b01      	subs	r3, #1
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_InitTick+0xe8>)
 8001058:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <HAL_InitTick+0xec>)
 800105a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HAL_InitTick+0xe8>)
 800105e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001062:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001064:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <HAL_InitTick+0xe8>)
 8001066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001068:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_InitTick+0xe8>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_InitTick+0xe8>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_InitTick+0xe8>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800107c:	4817      	ldr	r0, [pc, #92]	; (80010dc <HAL_InitTick+0xe8>)
 800107e:	f002 fd19 	bl	8003ab4 <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001088:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800108c:	2b00      	cmp	r3, #0
 800108e:	d11b      	bne.n	80010c8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001090:	4812      	ldr	r0, [pc, #72]	; (80010dc <HAL_InitTick+0xe8>)
 8001092:	f002 fd71 	bl	8003b78 <HAL_TIM_Base_Start_IT>
 8001096:	4603      	mov	r3, r0
 8001098:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800109c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d111      	bne.n	80010c8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010a4:	2036      	movs	r0, #54	; 0x36
 80010a6:	f001 f841 	bl	800212c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d808      	bhi.n	80010c2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	2036      	movs	r0, #54	; 0x36
 80010b6:	f001 f81d 	bl	80020f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_InitTick+0xf0>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e002      	b.n	80010c8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3738      	adds	r7, #56	; 0x38
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40023800 	.word	0x40023800
 80010d8:	431bde83 	.word	0x431bde83
 80010dc:	200006c4 	.word	0x200006c4
 80010e0:	40001000 	.word	0x40001000
 80010e4:	20000004 	.word	0x20000004

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <CAN1_RX0_IRQHandler+0x10>)
 800111a:	f000 fd04 	bl	8001b26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200000e4 	.word	0x200000e4

08001128 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <TIM6_DAC_IRQHandler+0x10>)
 800112e:	f002 fd9b 	bl	8003c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200006c4 	.word	0x200006c4

0800113c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001198 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001166:	490e      	ldr	r1, [pc, #56]	; (80011a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001168:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800117c:	4c0b      	ldr	r4, [pc, #44]	; (80011ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800118a:	f7ff ffd7 	bl	800113c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118e:	f006 fd2b 	bl	8007be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff fb59 	bl	8000848 <main>
  bx  lr    
 8001196:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001198:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011a4:	08007d88 	.word	0x08007d88
  ldr r2, =_sbss
 80011a8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80011ac:	20005234 	.word	0x20005234

080011b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC_IRQHandler>

080011b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b6:	2003      	movs	r0, #3
 80011b8:	f000 ff91 	bl	80020de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011bc:	200f      	movs	r0, #15
 80011be:	f7ff ff19 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c2:	f7ff fdc9 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000710 	.word	0x20000710

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000710 	.word	0x20000710

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff ffee 	bl	80011f4 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffde 	bl	80011f4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008

08001254 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e0ed      	b.n	8001442 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fd98 	bl	8000da8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0201 	orr.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001288:	f7ff ffb4 	bl	80011f4 <HAL_GetTick>
 800128c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800128e:	e012      	b.n	80012b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001290:	f7ff ffb0 	bl	80011f4 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b0a      	cmp	r3, #10
 800129c:	d90b      	bls.n	80012b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2205      	movs	r2, #5
 80012ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e0c5      	b.n	8001442 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0e5      	beq.n	8001290 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0202 	bic.w	r2, r2, #2
 80012d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d4:	f7ff ff8e 	bl	80011f4 <HAL_GetTick>
 80012d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012da:	e012      	b.n	8001302 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012dc:	f7ff ff8a 	bl	80011f4 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b0a      	cmp	r3, #10
 80012e8:	d90b      	bls.n	8001302 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2205      	movs	r2, #5
 80012fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e09f      	b.n	8001442 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1e5      	bne.n	80012dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7e1b      	ldrb	r3, [r3, #24]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d108      	bne.n	800132a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	e007      	b.n	800133a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7e5b      	ldrb	r3, [r3, #25]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d108      	bne.n	8001354 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	e007      	b.n	8001364 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001362:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7e9b      	ldrb	r3, [r3, #26]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d108      	bne.n	800137e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0220 	orr.w	r2, r2, #32
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	e007      	b.n	800138e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0220 	bic.w	r2, r2, #32
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7edb      	ldrb	r3, [r3, #27]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d108      	bne.n	80013a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0210 	bic.w	r2, r2, #16
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	e007      	b.n	80013b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0210 	orr.w	r2, r2, #16
 80013b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7f1b      	ldrb	r3, [r3, #28]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d108      	bne.n	80013d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0208 	orr.w	r2, r2, #8
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	e007      	b.n	80013e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0208 	bic.w	r2, r2, #8
 80013e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7f5b      	ldrb	r3, [r3, #29]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d108      	bne.n	80013fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 0204 	orr.w	r2, r2, #4
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	e007      	b.n	800140c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0204 	bic.w	r2, r2, #4
 800140a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	ea42 0103 	orr.w	r1, r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	1e5a      	subs	r2, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001462:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001464:	7cfb      	ldrb	r3, [r7, #19]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d003      	beq.n	8001472 <HAL_CAN_ConfigFilter+0x26>
 800146a:	7cfb      	ldrb	r3, [r7, #19]
 800146c:	2b02      	cmp	r3, #2
 800146e:	f040 80c7 	bne.w	8001600 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a69      	ldr	r2, [pc, #420]	; (800161c <HAL_CAN_ConfigFilter+0x1d0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d001      	beq.n	8001480 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800147c:	4b68      	ldr	r3, [pc, #416]	; (8001620 <HAL_CAN_ConfigFilter+0x1d4>)
 800147e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001486:	f043 0201 	orr.w	r2, r3, #1
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	4a63      	ldr	r2, [pc, #396]	; (8001620 <HAL_CAN_ConfigFilter+0x1d4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d111      	bne.n	80014bc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800149e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	431a      	orrs	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	f003 031f 	and.w	r3, r3, #31
 80014c4:	2201      	movs	r2, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d123      	bne.n	800152e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	401a      	ands	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001508:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3248      	adds	r2, #72	; 0x48
 800150e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001522:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001524:	6979      	ldr	r1, [r7, #20]
 8001526:	3348      	adds	r3, #72	; 0x48
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	440b      	add	r3, r1
 800152c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d122      	bne.n	800157c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	431a      	orrs	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001556:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3248      	adds	r2, #72	; 0x48
 800155c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001570:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001572:	6979      	ldr	r1, [r7, #20]
 8001574:	3348      	adds	r3, #72	; 0x48
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d109      	bne.n	8001598 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43db      	mvns	r3, r3
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001596:	e007      	b.n	80015a8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d109      	bne.n	80015c4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80015c2:	e007      	b.n	80015d4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	431a      	orrs	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d107      	bne.n	80015ec <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015f2:	f023 0201 	bic.w	r2, r3, #1
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e006      	b.n	800160e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
  }
}
 800160e:	4618      	mov	r0, r3
 8001610:	371c      	adds	r7, #28
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40003400 	.word	0x40003400
 8001620:	40006400 	.word	0x40006400

08001624 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b01      	cmp	r3, #1
 8001636:	d12e      	bne.n	8001696 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2202      	movs	r2, #2
 800163c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0201 	bic.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001650:	f7ff fdd0 	bl	80011f4 <HAL_GetTick>
 8001654:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001656:	e012      	b.n	800167e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001658:	f7ff fdcc 	bl	80011f4 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b0a      	cmp	r3, #10
 8001664:	d90b      	bls.n	800167e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2205      	movs	r2, #5
 8001676:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e012      	b.n	80016a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1e5      	bne.n	8001658 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e006      	b.n	80016a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
  }
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016ca:	7ffb      	ldrb	r3, [r7, #31]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d003      	beq.n	80016d8 <HAL_CAN_AddTxMessage+0x2c>
 80016d0:	7ffb      	ldrb	r3, [r7, #31]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	f040 80ad 	bne.w	8001832 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10a      	bne.n	80016f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d105      	bne.n	80016f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8095 	beq.w	8001822 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	0e1b      	lsrs	r3, r3, #24
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001702:	2201      	movs	r2, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10d      	bne.n	8001730 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800171e:	68f9      	ldr	r1, [r7, #12]
 8001720:	6809      	ldr	r1, [r1, #0]
 8001722:	431a      	orrs	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3318      	adds	r3, #24
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	440b      	add	r3, r1
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e00f      	b.n	8001750 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800173a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001744:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3318      	adds	r3, #24
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	440b      	add	r3, r1
 800174e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6819      	ldr	r1, [r3, #0]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3318      	adds	r3, #24
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	440b      	add	r3, r1
 8001760:	3304      	adds	r3, #4
 8001762:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	7d1b      	ldrb	r3, [r3, #20]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d111      	bne.n	8001790 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3318      	adds	r3, #24
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	3304      	adds	r3, #4
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	6811      	ldr	r1, [r2, #0]
 8001780:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3318      	adds	r3, #24
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	440b      	add	r3, r1
 800178c:	3304      	adds	r3, #4
 800178e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3307      	adds	r3, #7
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	061a      	lsls	r2, r3, #24
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3306      	adds	r3, #6
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	041b      	lsls	r3, r3, #16
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3305      	adds	r3, #5
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	4313      	orrs	r3, r2
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	3204      	adds	r2, #4
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	4610      	mov	r0, r2
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	6811      	ldr	r1, [r2, #0]
 80017b8:	ea43 0200 	orr.w	r2, r3, r0
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	440b      	add	r3, r1
 80017c2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80017c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3303      	adds	r3, #3
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	061a      	lsls	r2, r3, #24
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3302      	adds	r3, #2
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	041b      	lsls	r3, r3, #16
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3301      	adds	r3, #1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	4313      	orrs	r3, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	4610      	mov	r0, r2
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	6811      	ldr	r1, [r2, #0]
 80017ee:	ea43 0200 	orr.w	r2, r3, r0
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	440b      	add	r3, r1
 80017f8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80017fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3318      	adds	r3, #24
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	4413      	add	r3, r2
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	6811      	ldr	r1, [r2, #0]
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	3318      	adds	r3, #24
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	440b      	add	r3, r1
 800181c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e00e      	b.n	8001840 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e006      	b.n	8001840 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
  }
}
 8001840:	4618      	mov	r0, r3
 8001842:	3724      	adds	r7, #36	; 0x24
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001860:	7afb      	ldrb	r3, [r7, #11]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d002      	beq.n	800186c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001866:	7afb      	ldrb	r3, [r7, #11]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d11d      	bne.n	80018a8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3301      	adds	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	3301      	adds	r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3301      	adds	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80018a8:	68fb      	ldr	r3, [r7, #12]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018b6:	b480      	push	{r7}
 80018b8:	b087      	sub	sp, #28
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d003      	beq.n	80018da <HAL_CAN_GetRxMessage+0x24>
 80018d2:	7dfb      	ldrb	r3, [r7, #23]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	f040 80f3 	bne.w	8001ac0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10e      	bne.n	80018fe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d116      	bne.n	800191c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0e7      	b.n	8001ace <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d107      	bne.n	800191c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0d8      	b.n	8001ace <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	331b      	adds	r3, #27
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	4413      	add	r3, r2
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0204 	and.w	r2, r3, #4
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10c      	bne.n	8001954 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	331b      	adds	r3, #27
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	4413      	add	r3, r2
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0d5b      	lsrs	r3, r3, #21
 800194a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e00b      	b.n	800196c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	331b      	adds	r3, #27
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	4413      	add	r3, r2
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	08db      	lsrs	r3, r3, #3
 8001964:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	331b      	adds	r3, #27
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	4413      	add	r3, r2
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0202 	and.w	r2, r3, #2
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	331b      	adds	r3, #27
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	4413      	add	r3, r2
 800198e:	3304      	adds	r3, #4
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 020f 	and.w	r2, r3, #15
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	331b      	adds	r3, #27
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	4413      	add	r3, r2
 80019a6:	3304      	adds	r3, #4
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	0a1b      	lsrs	r3, r3, #8
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	331b      	adds	r3, #27
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	4413      	add	r3, r2
 80019be:	3304      	adds	r3, #4
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	0c1b      	lsrs	r3, r3, #16
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	4413      	add	r3, r2
 80019d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0a1a      	lsrs	r2, r3, #8
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	0c1a      	lsrs	r2, r3, #16
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	3302      	adds	r3, #2
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0e1a      	lsrs	r2, r3, #24
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	3303      	adds	r3, #3
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	4413      	add	r3, r2
 8001a38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	3304      	adds	r3, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0a1a      	lsrs	r2, r3, #8
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	3305      	adds	r3, #5
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	4413      	add	r3, r2
 8001a6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	0c1a      	lsrs	r2, r3, #16
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	3306      	adds	r3, #6
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	0e1a      	lsrs	r2, r3, #24
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	3307      	adds	r3, #7
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d108      	bne.n	8001aac <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0220 	orr.w	r2, r2, #32
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	e007      	b.n	8001abc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0220 	orr.w	r2, r2, #32
 8001aba:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e006      	b.n	8001ace <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
  }
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	371c      	adds	r7, #28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b085      	sub	sp, #20
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d002      	beq.n	8001af8 <HAL_CAN_ActivateNotification+0x1e>
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d109      	bne.n	8001b0c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6959      	ldr	r1, [r3, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	e006      	b.n	8001b1a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
  }
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b08a      	sub	sp, #40	; 0x28
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d07c      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d023      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f983 	bl	8001e94 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b8e:	e016      	b.n	8001bbe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d004      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba2:	e00c      	b.n	8001bbe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d004      	beq.n	8001bb8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	e002      	b.n	8001bbe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f989 	bl	8001ed0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d024      	beq.n	8001c12 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f963 	bl	8001ea8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001be2:	e016      	b.n	8001c12 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf6:	e00c      	b.n	8001c12 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0a:	e002      	b.n	8001c12 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f969 	bl	8001ee4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d024      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f943 	bl	8001ebc <HAL_CAN_TxMailbox2CompleteCallback>
 8001c36:	e016      	b.n	8001c66 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d004      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4a:	e00c      	b.n	8001c66 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d004      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5e:	e002      	b.n	8001c66 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f949 	bl	8001ef8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00c      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2210      	movs	r2, #16
 8001c88:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00b      	beq.n	8001cac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f930 	bl	8001f0c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7fe fd9f 	bl	8000808 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00c      	beq.n	8001cee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2210      	movs	r2, #16
 8001cec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00b      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2208      	movs	r2, #8
 8001d08:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f912 	bl	8001f34 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d009      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d002      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f8f9 	bl	8001f20 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00b      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2210      	movs	r2, #16
 8001d48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8fc 	bl	8001f48 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2208      	movs	r2, #8
 8001d6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f8f5 	bl	8001f5c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d07b      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d072      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d043      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d03e      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001df4:	2b60      	cmp	r3, #96	; 0x60
 8001df6:	d02b      	beq.n	8001e50 <HAL_CAN_IRQHandler+0x32a>
 8001df8:	2b60      	cmp	r3, #96	; 0x60
 8001dfa:	d82e      	bhi.n	8001e5a <HAL_CAN_IRQHandler+0x334>
 8001dfc:	2b50      	cmp	r3, #80	; 0x50
 8001dfe:	d022      	beq.n	8001e46 <HAL_CAN_IRQHandler+0x320>
 8001e00:	2b50      	cmp	r3, #80	; 0x50
 8001e02:	d82a      	bhi.n	8001e5a <HAL_CAN_IRQHandler+0x334>
 8001e04:	2b40      	cmp	r3, #64	; 0x40
 8001e06:	d019      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x316>
 8001e08:	2b40      	cmp	r3, #64	; 0x40
 8001e0a:	d826      	bhi.n	8001e5a <HAL_CAN_IRQHandler+0x334>
 8001e0c:	2b30      	cmp	r3, #48	; 0x30
 8001e0e:	d010      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x30c>
 8001e10:	2b30      	cmp	r3, #48	; 0x30
 8001e12:	d822      	bhi.n	8001e5a <HAL_CAN_IRQHandler+0x334>
 8001e14:	2b10      	cmp	r3, #16
 8001e16:	d002      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x2f8>
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d005      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e1c:	e01d      	b.n	8001e5a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	f043 0308 	orr.w	r3, r3, #8
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e26:	e019      	b.n	8001e5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e30:	e014      	b.n	8001e5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	f043 0320 	orr.w	r3, r3, #32
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e3a:	e00f      	b.n	8001e5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e44:	e00a      	b.n	8001e5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e4e:	e005      	b.n	8001e5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e58:	e000      	b.n	8001e5c <HAL_CAN_IRQHandler+0x336>
            break;
 8001e5a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e6a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2204      	movs	r2, #4
 8001e72:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f872 	bl	8001f70 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	3728      	adds	r7, #40	; 0x28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb2:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00
 8001fc8:	05fa0000 	.word	0x05fa0000

08001fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db0b      	blt.n	8002012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4907      	ldr	r1, [pc, #28]	; (8002020 <__NVIC_EnableIRQ+0x38>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2001      	movs	r0, #1
 800200a:	fa00 f202 	lsl.w	r2, r0, r2
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100

08002024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	db0a      	blt.n	800204e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	490c      	ldr	r1, [pc, #48]	; (8002070 <__NVIC_SetPriority+0x4c>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	0112      	lsls	r2, r2, #4
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	440b      	add	r3, r1
 8002048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800204c:	e00a      	b.n	8002064 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4908      	ldr	r1, [pc, #32]	; (8002074 <__NVIC_SetPriority+0x50>)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	3b04      	subs	r3, #4
 800205c:	0112      	lsls	r2, r2, #4
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	440b      	add	r3, r1
 8002062:	761a      	strb	r2, [r3, #24]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000e100 	.word	0xe000e100
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f1c3 0307 	rsb	r3, r3, #7
 8002092:	2b04      	cmp	r3, #4
 8002094:	bf28      	it	cs
 8002096:	2304      	movcs	r3, #4
 8002098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3304      	adds	r3, #4
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d902      	bls.n	80020a8 <NVIC_EncodePriority+0x30>
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3b03      	subs	r3, #3
 80020a6:	e000      	b.n	80020aa <NVIC_EncodePriority+0x32>
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	401a      	ands	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	43d9      	mvns	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	4313      	orrs	r3, r2
         );
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ff4c 	bl	8001f84 <__NVIC_SetPriorityGrouping>
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002106:	f7ff ff61 	bl	8001fcc <__NVIC_GetPriorityGrouping>
 800210a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	6978      	ldr	r0, [r7, #20]
 8002112:	f7ff ffb1 	bl	8002078 <NVIC_EncodePriority>
 8002116:	4602      	mov	r2, r0
 8002118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ff80 	bl	8002024 <__NVIC_SetPriority>
}
 8002124:	bf00      	nop
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff54 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	e175      	b.n	8002454 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002168:	2201      	movs	r2, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	429a      	cmp	r2, r3
 8002182:	f040 8164 	bne.w	800244e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b01      	cmp	r3, #1
 8002190:	d005      	beq.n	800219e <HAL_GPIO_Init+0x56>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d130      	bne.n	8002200 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2203      	movs	r2, #3
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d4:	2201      	movs	r2, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 0201 	and.w	r2, r3, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b03      	cmp	r3, #3
 800220a:	d017      	beq.n	800223c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d123      	bne.n	8002290 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	08da      	lsrs	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3208      	adds	r2, #8
 8002250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	220f      	movs	r2, #15
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	08da      	lsrs	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3208      	adds	r2, #8
 800228a:	69b9      	ldr	r1, [r7, #24]
 800228c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0203 	and.w	r2, r3, #3
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80be 	beq.w	800244e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	4b66      	ldr	r3, [pc, #408]	; (800246c <HAL_GPIO_Init+0x324>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a65      	ldr	r2, [pc, #404]	; (800246c <HAL_GPIO_Init+0x324>)
 80022d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b63      	ldr	r3, [pc, #396]	; (800246c <HAL_GPIO_Init+0x324>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022ea:	4a61      	ldr	r2, [pc, #388]	; (8002470 <HAL_GPIO_Init+0x328>)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a58      	ldr	r2, [pc, #352]	; (8002474 <HAL_GPIO_Init+0x32c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d037      	beq.n	8002386 <HAL_GPIO_Init+0x23e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a57      	ldr	r2, [pc, #348]	; (8002478 <HAL_GPIO_Init+0x330>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d031      	beq.n	8002382 <HAL_GPIO_Init+0x23a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a56      	ldr	r2, [pc, #344]	; (800247c <HAL_GPIO_Init+0x334>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d02b      	beq.n	800237e <HAL_GPIO_Init+0x236>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a55      	ldr	r2, [pc, #340]	; (8002480 <HAL_GPIO_Init+0x338>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d025      	beq.n	800237a <HAL_GPIO_Init+0x232>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a54      	ldr	r2, [pc, #336]	; (8002484 <HAL_GPIO_Init+0x33c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01f      	beq.n	8002376 <HAL_GPIO_Init+0x22e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a53      	ldr	r2, [pc, #332]	; (8002488 <HAL_GPIO_Init+0x340>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d019      	beq.n	8002372 <HAL_GPIO_Init+0x22a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a52      	ldr	r2, [pc, #328]	; (800248c <HAL_GPIO_Init+0x344>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d013      	beq.n	800236e <HAL_GPIO_Init+0x226>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a51      	ldr	r2, [pc, #324]	; (8002490 <HAL_GPIO_Init+0x348>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00d      	beq.n	800236a <HAL_GPIO_Init+0x222>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a50      	ldr	r2, [pc, #320]	; (8002494 <HAL_GPIO_Init+0x34c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d007      	beq.n	8002366 <HAL_GPIO_Init+0x21e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4f      	ldr	r2, [pc, #316]	; (8002498 <HAL_GPIO_Init+0x350>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d101      	bne.n	8002362 <HAL_GPIO_Init+0x21a>
 800235e:	2309      	movs	r3, #9
 8002360:	e012      	b.n	8002388 <HAL_GPIO_Init+0x240>
 8002362:	230a      	movs	r3, #10
 8002364:	e010      	b.n	8002388 <HAL_GPIO_Init+0x240>
 8002366:	2308      	movs	r3, #8
 8002368:	e00e      	b.n	8002388 <HAL_GPIO_Init+0x240>
 800236a:	2307      	movs	r3, #7
 800236c:	e00c      	b.n	8002388 <HAL_GPIO_Init+0x240>
 800236e:	2306      	movs	r3, #6
 8002370:	e00a      	b.n	8002388 <HAL_GPIO_Init+0x240>
 8002372:	2305      	movs	r3, #5
 8002374:	e008      	b.n	8002388 <HAL_GPIO_Init+0x240>
 8002376:	2304      	movs	r3, #4
 8002378:	e006      	b.n	8002388 <HAL_GPIO_Init+0x240>
 800237a:	2303      	movs	r3, #3
 800237c:	e004      	b.n	8002388 <HAL_GPIO_Init+0x240>
 800237e:	2302      	movs	r3, #2
 8002380:	e002      	b.n	8002388 <HAL_GPIO_Init+0x240>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_GPIO_Init+0x240>
 8002386:	2300      	movs	r3, #0
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	f002 0203 	and.w	r2, r2, #3
 800238e:	0092      	lsls	r2, r2, #2
 8002390:	4093      	lsls	r3, r2
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002398:	4935      	ldr	r1, [pc, #212]	; (8002470 <HAL_GPIO_Init+0x328>)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	3302      	adds	r3, #2
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023a6:	4b3d      	ldr	r3, [pc, #244]	; (800249c <HAL_GPIO_Init+0x354>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ca:	4a34      	ldr	r2, [pc, #208]	; (800249c <HAL_GPIO_Init+0x354>)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d0:	4b32      	ldr	r3, [pc, #200]	; (800249c <HAL_GPIO_Init+0x354>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f4:	4a29      	ldr	r2, [pc, #164]	; (800249c <HAL_GPIO_Init+0x354>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023fa:	4b28      	ldr	r3, [pc, #160]	; (800249c <HAL_GPIO_Init+0x354>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800241e:	4a1f      	ldr	r2, [pc, #124]	; (800249c <HAL_GPIO_Init+0x354>)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_GPIO_Init+0x354>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002448:	4a14      	ldr	r2, [pc, #80]	; (800249c <HAL_GPIO_Init+0x354>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3301      	adds	r3, #1
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	2b0f      	cmp	r3, #15
 8002458:	f67f ae86 	bls.w	8002168 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	40013800 	.word	0x40013800
 8002474:	40020000 	.word	0x40020000
 8002478:	40020400 	.word	0x40020400
 800247c:	40020800 	.word	0x40020800
 8002480:	40020c00 	.word	0x40020c00
 8002484:	40021000 	.word	0x40021000
 8002488:	40021400 	.word	0x40021400
 800248c:	40021800 	.word	0x40021800
 8002490:	40021c00 	.word	0x40021c00
 8002494:	40022000 	.word	0x40022000
 8002498:	40022400 	.word	0x40022400
 800249c:	40013c00 	.word	0x40013c00

080024a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	807b      	strh	r3, [r7, #2]
 80024ac:	4613      	mov	r3, r2
 80024ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b0:	787b      	ldrb	r3, [r7, #1]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024bc:	e003      	b.n	80024c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024be:	887b      	ldrh	r3, [r7, #2]
 80024c0:	041a      	lsls	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	619a      	str	r2, [r3, #24]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e4:	887a      	ldrh	r2, [r7, #2]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4013      	ands	r3, r2
 80024ea:	041a      	lsls	r2, r3, #16
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	43d9      	mvns	r1, r3
 80024f0:	887b      	ldrh	r3, [r7, #2]
 80024f2:	400b      	ands	r3, r1
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	619a      	str	r2, [r3, #24]
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002508:	b08f      	sub	sp, #60	; 0x3c
 800250a:	af0a      	add	r7, sp, #40	; 0x28
 800250c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e116      	b.n	8002746 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d106      	bne.n	8002538 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fce4 	bl	8000f00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2203      	movs	r2, #3
 800253c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f002 fa4c 	bl	80049f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	687e      	ldr	r6, [r7, #4]
 8002564:	466d      	mov	r5, sp
 8002566:	f106 0410 	add.w	r4, r6, #16
 800256a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800256c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800256e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002572:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002576:	e885 0003 	stmia.w	r5, {r0, r1}
 800257a:	1d33      	adds	r3, r6, #4
 800257c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800257e:	6838      	ldr	r0, [r7, #0]
 8002580:	f002 f9e0 	bl	8004944 <USB_CoreInit>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0d7      	b.n	8002746 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f002 fa3a 	bl	8004a16 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	e04a      	b.n	800263e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	333d      	adds	r3, #61	; 0x3d
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	333c      	adds	r3, #60	; 0x3c
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	b298      	uxth	r0, r3
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	3344      	adds	r3, #68	; 0x44
 80025e4:	4602      	mov	r2, r0
 80025e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	3340      	adds	r3, #64	; 0x40
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	3348      	adds	r3, #72	; 0x48
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002610:	7bfa      	ldrb	r2, [r7, #15]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	334c      	adds	r3, #76	; 0x4c
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	3354      	adds	r3, #84	; 0x54
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	3301      	adds	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	d3af      	bcc.n	80025a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e044      	b.n	80026d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	3301      	adds	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d3b5      	bcc.n	800264e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	687e      	ldr	r6, [r7, #4]
 80026ea:	466d      	mov	r5, sp
 80026ec:	f106 0410 	add.w	r4, r6, #16
 80026f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002700:	1d33      	adds	r3, r6, #4
 8002702:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002704:	6838      	ldr	r0, [r7, #0]
 8002706:	f002 f9d3 	bl	8004ab0 <USB_DevInit>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e014      	b.n	8002746 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	2b01      	cmp	r3, #1
 8002732:	d102      	bne.n	800273a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f80b 	bl	8002750 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f002 fb91 	bl	8004e66 <USB_DevDisconnect>

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002750 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800277e:	4b05      	ldr	r3, [pc, #20]	; (8002794 <HAL_PCDEx_ActivateLPM+0x44>)
 8002780:	4313      	orrs	r3, r2
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	10000003 	.word	0x10000003

08002798 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40007000 	.word	0x40007000

080027b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_PWREx_EnableOverDrive+0x98>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a22      	ldr	r2, [pc, #136]	; (8002850 <HAL_PWREx_EnableOverDrive+0x98>)
 80027c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_PWREx_EnableOverDrive+0x98>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027e6:	f7fe fd05 	bl	80011f4 <HAL_GetTick>
 80027ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027ec:	e009      	b.n	8002802 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027ee:	f7fe fd01 	bl	80011f4 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027fc:	d901      	bls.n	8002802 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e022      	b.n	8002848 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280e:	d1ee      	bne.n	80027ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800281c:	f7fe fcea 	bl	80011f4 <HAL_GetTick>
 8002820:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002822:	e009      	b.n	8002838 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002824:	f7fe fce6 	bl	80011f4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002832:	d901      	bls.n	8002838 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e007      	b.n	8002848 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_PWREx_EnableOverDrive+0x9c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002844:	d1ee      	bne.n	8002824 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	40007000 	.word	0x40007000

08002858 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002860:	2300      	movs	r3, #0
 8002862:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e29b      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8087 	beq.w	800298a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800287c:	4b96      	ldr	r3, [pc, #600]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b04      	cmp	r3, #4
 8002886:	d00c      	beq.n	80028a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002888:	4b93      	ldr	r3, [pc, #588]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 030c 	and.w	r3, r3, #12
 8002890:	2b08      	cmp	r3, #8
 8002892:	d112      	bne.n	80028ba <HAL_RCC_OscConfig+0x62>
 8002894:	4b90      	ldr	r3, [pc, #576]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a0:	d10b      	bne.n	80028ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a2:	4b8d      	ldr	r3, [pc, #564]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d06c      	beq.n	8002988 <HAL_RCC_OscConfig+0x130>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d168      	bne.n	8002988 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e275      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x7a>
 80028c4:	4b84      	ldr	r3, [pc, #528]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a83      	ldr	r2, [pc, #524]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80028ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	e02e      	b.n	8002930 <HAL_RCC_OscConfig+0xd8>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x9c>
 80028da:	4b7f      	ldr	r3, [pc, #508]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a7e      	ldr	r2, [pc, #504]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80028e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b7c      	ldr	r3, [pc, #496]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a7b      	ldr	r2, [pc, #492]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80028ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e01d      	b.n	8002930 <HAL_RCC_OscConfig+0xd8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0xc0>
 80028fe:	4b76      	ldr	r3, [pc, #472]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a75      	ldr	r2, [pc, #468]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b73      	ldr	r3, [pc, #460]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a72      	ldr	r2, [pc, #456]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0xd8>
 8002918:	4b6f      	ldr	r3, [pc, #444]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a6e      	ldr	r2, [pc, #440]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 800291e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b6c      	ldr	r3, [pc, #432]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a6b      	ldr	r2, [pc, #428]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 800292a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe fc5c 	bl	80011f4 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002940:	f7fe fc58 	bl	80011f4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e229      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	4b61      	ldr	r3, [pc, #388]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0xe8>
 800295e:	e014      	b.n	800298a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fc48 	bl	80011f4 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe fc44 	bl	80011f4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e215      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297a:	4b57      	ldr	r3, [pc, #348]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x110>
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d069      	beq.n	8002a6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b4d      	ldr	r3, [pc, #308]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d11c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x190>
 80029ae:	4b4a      	ldr	r3, [pc, #296]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d116      	bne.n	80029e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_RCC_OscConfig+0x17a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e1e9      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	493d      	ldr	r1, [pc, #244]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e6:	e040      	b.n	8002a6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d023      	beq.n	8002a38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f0:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a38      	ldr	r2, [pc, #224]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fbfa 	bl	80011f4 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a04:	f7fe fbf6 	bl	80011f4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1c7      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a22:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4929      	ldr	r1, [pc, #164]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]
 8002a36:	e018      	b.n	8002a6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a38:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a26      	ldr	r2, [pc, #152]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe fbd6 	bl	80011f4 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4c:	f7fe fbd2 	bl	80011f4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e1a3      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d038      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d019      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a82:	4a15      	ldr	r2, [pc, #84]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fbb3 	bl	80011f4 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a92:	f7fe fbaf 	bl	80011f4 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e180      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x23a>
 8002ab0:	e01a      	b.n	8002ae8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab6:	4a08      	ldr	r2, [pc, #32]	; (8002ad8 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7fe fb99 	bl	80011f4 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fb95 	bl	80011f4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d903      	bls.n	8002adc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e166      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
 8002ad8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	4b92      	ldr	r3, [pc, #584]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1ee      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80a4 	beq.w	8002c3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af6:	4b8c      	ldr	r3, [pc, #560]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10d      	bne.n	8002b1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	4b89      	ldr	r3, [pc, #548]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4a88      	ldr	r2, [pc, #544]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0e:	4b86      	ldr	r3, [pc, #536]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b1e:	4b83      	ldr	r3, [pc, #524]	; (8002d2c <HAL_RCC_OscConfig+0x4d4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d118      	bne.n	8002b5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b2a:	4b80      	ldr	r3, [pc, #512]	; (8002d2c <HAL_RCC_OscConfig+0x4d4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a7f      	ldr	r2, [pc, #508]	; (8002d2c <HAL_RCC_OscConfig+0x4d4>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b36:	f7fe fb5d 	bl	80011f4 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3e:	f7fe fb59 	bl	80011f4 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b64      	cmp	r3, #100	; 0x64
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e12a      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b50:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <HAL_RCC_OscConfig+0x4d4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d106      	bne.n	8002b72 <HAL_RCC_OscConfig+0x31a>
 8002b64:	4b70      	ldr	r3, [pc, #448]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	4a6f      	ldr	r2, [pc, #444]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b70:	e02d      	b.n	8002bce <HAL_RCC_OscConfig+0x376>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x33c>
 8002b7a:	4b6b      	ldr	r3, [pc, #428]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	4a6a      	ldr	r2, [pc, #424]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	6713      	str	r3, [r2, #112]	; 0x70
 8002b86:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a67      	ldr	r2, [pc, #412]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b8c:	f023 0304 	bic.w	r3, r3, #4
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
 8002b92:	e01c      	b.n	8002bce <HAL_RCC_OscConfig+0x376>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x35e>
 8002b9c:	4b62      	ldr	r3, [pc, #392]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a61      	ldr	r2, [pc, #388]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002ba2:	f043 0304 	orr.w	r3, r3, #4
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba8:	4b5f      	ldr	r3, [pc, #380]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	4a5e      	ldr	r2, [pc, #376]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb4:	e00b      	b.n	8002bce <HAL_RCC_OscConfig+0x376>
 8002bb6:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a5b      	ldr	r2, [pc, #364]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc2:	4b59      	ldr	r3, [pc, #356]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	4a58      	ldr	r2, [pc, #352]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002bc8:	f023 0304 	bic.w	r3, r3, #4
 8002bcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d015      	beq.n	8002c02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fb0d 	bl	80011f4 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bde:	f7fe fb09 	bl	80011f4 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e0d8      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf4:	4b4c      	ldr	r3, [pc, #304]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ee      	beq.n	8002bde <HAL_RCC_OscConfig+0x386>
 8002c00:	e014      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c02:	f7fe faf7 	bl	80011f4 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c08:	e00a      	b.n	8002c20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0a:	f7fe faf3 	bl	80011f4 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e0c2      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c20:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ee      	bne.n	8002c0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d105      	bne.n	8002c3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c32:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	4a3c      	ldr	r2, [pc, #240]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 80ae 	beq.w	8002da4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c48:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d06d      	beq.n	8002d30 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d14b      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5c:	4b32      	ldr	r3, [pc, #200]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a31      	ldr	r2, [pc, #196]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe fac4 	bl	80011f4 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe fac0 	bl	80011f4 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e091      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69da      	ldr	r2, [r3, #28]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	019b      	lsls	r3, r3, #6
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	041b      	lsls	r3, r3, #16
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	061b      	lsls	r3, r3, #24
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	071b      	lsls	r3, r3, #28
 8002cba:	491b      	ldr	r1, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a18      	ldr	r2, [pc, #96]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fa92 	bl	80011f4 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe fa8e 	bl	80011f4 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e05f      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x47c>
 8002cf2:	e057      	b.n	8002da4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0b      	ldr	r2, [pc, #44]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002cfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fa78 	bl	80011f4 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe fa74 	bl	80011f4 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e045      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <HAL_RCC_OscConfig+0x4d0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4b0>
 8002d26:	e03d      	b.n	8002da4 <HAL_RCC_OscConfig+0x54c>
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d30:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <HAL_RCC_OscConfig+0x558>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d030      	beq.n	8002da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d129      	bne.n	8002da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d122      	bne.n	8002da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d60:	4013      	ands	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d66:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d119      	bne.n	8002da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d10f      	bne.n	8002da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800

08002db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0d0      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b6a      	ldr	r3, [pc, #424]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d910      	bls.n	8002dfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b67      	ldr	r3, [pc, #412]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 020f 	bic.w	r2, r3, #15
 8002de2:	4965      	ldr	r1, [pc, #404]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	4b63      	ldr	r3, [pc, #396]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0b8      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d020      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e14:	4b59      	ldr	r3, [pc, #356]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a58      	ldr	r2, [pc, #352]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e2c:	4b53      	ldr	r3, [pc, #332]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4a52      	ldr	r2, [pc, #328]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e38:	4b50      	ldr	r3, [pc, #320]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	494d      	ldr	r1, [pc, #308]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d040      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5e:	4b47      	ldr	r3, [pc, #284]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d115      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e07f      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e76:	4b41      	ldr	r3, [pc, #260]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e073      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e86:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e06b      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e96:	4b39      	ldr	r3, [pc, #228]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4936      	ldr	r1, [pc, #216]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea8:	f7fe f9a4 	bl	80011f4 <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb0:	f7fe f9a0 	bl	80011f4 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e053      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	4b2d      	ldr	r3, [pc, #180]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 020c 	and.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1eb      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d210      	bcs.n	8002f08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 020f 	bic.w	r2, r3, #15
 8002eee:	4922      	ldr	r1, [pc, #136]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e032      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4916      	ldr	r1, [pc, #88]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	490e      	ldr	r1, [pc, #56]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f46:	f000 f821 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	490a      	ldr	r1, [pc, #40]	; (8002f80 <HAL_RCC_ClockConfig+0x1cc>)
 8002f58:	5ccb      	ldrb	r3, [r1, r3]
 8002f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5e:	4a09      	ldr	r2, [pc, #36]	; (8002f84 <HAL_RCC_ClockConfig+0x1d0>)
 8002f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <HAL_RCC_ClockConfig+0x1d4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe f844 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40023c00 	.word	0x40023c00
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	08007d60 	.word	0x08007d60
 8002f84:	20000000 	.word	0x20000000
 8002f88:	20000004 	.word	0x20000004

08002f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f90:	b094      	sub	sp, #80	; 0x50
 8002f92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	647b      	str	r3, [r7, #68]	; 0x44
 8002f98:	2300      	movs	r3, #0
 8002f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fa4:	4b79      	ldr	r3, [pc, #484]	; (800318c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d00d      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x40>
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	f200 80e1 	bhi.w	8003178 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d003      	beq.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fbe:	e0db      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc0:	4b73      	ldr	r3, [pc, #460]	; (8003190 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fc4:	e0db      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fc6:	4b73      	ldr	r3, [pc, #460]	; (8003194 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fca:	e0d8      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fcc:	4b6f      	ldr	r3, [pc, #444]	; (800318c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fd6:	4b6d      	ldr	r3, [pc, #436]	; (800318c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d063      	beq.n	80030aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe2:	4b6a      	ldr	r3, [pc, #424]	; (800318c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	099b      	lsrs	r3, r3, #6
 8002fe8:	2200      	movs	r2, #0
 8002fea:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8002ffa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ffe:	4622      	mov	r2, r4
 8003000:	462b      	mov	r3, r5
 8003002:	f04f 0000 	mov.w	r0, #0
 8003006:	f04f 0100 	mov.w	r1, #0
 800300a:	0159      	lsls	r1, r3, #5
 800300c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003010:	0150      	lsls	r0, r2, #5
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4621      	mov	r1, r4
 8003018:	1a51      	subs	r1, r2, r1
 800301a:	6139      	str	r1, [r7, #16]
 800301c:	4629      	mov	r1, r5
 800301e:	eb63 0301 	sbc.w	r3, r3, r1
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003030:	4659      	mov	r1, fp
 8003032:	018b      	lsls	r3, r1, #6
 8003034:	4651      	mov	r1, sl
 8003036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800303a:	4651      	mov	r1, sl
 800303c:	018a      	lsls	r2, r1, #6
 800303e:	4651      	mov	r1, sl
 8003040:	ebb2 0801 	subs.w	r8, r2, r1
 8003044:	4659      	mov	r1, fp
 8003046:	eb63 0901 	sbc.w	r9, r3, r1
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800305a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800305e:	4690      	mov	r8, r2
 8003060:	4699      	mov	r9, r3
 8003062:	4623      	mov	r3, r4
 8003064:	eb18 0303 	adds.w	r3, r8, r3
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	462b      	mov	r3, r5
 800306c:	eb49 0303 	adc.w	r3, r9, r3
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800307e:	4629      	mov	r1, r5
 8003080:	024b      	lsls	r3, r1, #9
 8003082:	4621      	mov	r1, r4
 8003084:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003088:	4621      	mov	r1, r4
 800308a:	024a      	lsls	r2, r1, #9
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003092:	2200      	movs	r2, #0
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
 8003096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003098:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800309c:	f7fd f8d0 	bl	8000240 <__aeabi_uldivmod>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4613      	mov	r3, r2
 80030a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030a8:	e058      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030aa:	4b38      	ldr	r3, [pc, #224]	; (800318c <HAL_RCC_GetSysClockFreq+0x200>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	099b      	lsrs	r3, r3, #6
 80030b0:	2200      	movs	r2, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	4611      	mov	r1, r2
 80030b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030ba:	623b      	str	r3, [r7, #32]
 80030bc:	2300      	movs	r3, #0
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
 80030c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030c4:	4642      	mov	r2, r8
 80030c6:	464b      	mov	r3, r9
 80030c8:	f04f 0000 	mov.w	r0, #0
 80030cc:	f04f 0100 	mov.w	r1, #0
 80030d0:	0159      	lsls	r1, r3, #5
 80030d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d6:	0150      	lsls	r0, r2, #5
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4641      	mov	r1, r8
 80030de:	ebb2 0a01 	subs.w	sl, r2, r1
 80030e2:	4649      	mov	r1, r9
 80030e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003100:	eb63 050b 	sbc.w	r5, r3, fp
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	00eb      	lsls	r3, r5, #3
 800310e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003112:	00e2      	lsls	r2, r4, #3
 8003114:	4614      	mov	r4, r2
 8003116:	461d      	mov	r5, r3
 8003118:	4643      	mov	r3, r8
 800311a:	18e3      	adds	r3, r4, r3
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	464b      	mov	r3, r9
 8003120:	eb45 0303 	adc.w	r3, r5, r3
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003132:	4629      	mov	r1, r5
 8003134:	028b      	lsls	r3, r1, #10
 8003136:	4621      	mov	r1, r4
 8003138:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800313c:	4621      	mov	r1, r4
 800313e:	028a      	lsls	r2, r1, #10
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003146:	2200      	movs	r2, #0
 8003148:	61bb      	str	r3, [r7, #24]
 800314a:	61fa      	str	r2, [r7, #28]
 800314c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003150:	f7fd f876 	bl	8000240 <__aeabi_uldivmod>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4613      	mov	r3, r2
 800315a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCC_GetSysClockFreq+0x200>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	3301      	adds	r3, #1
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800316c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800316e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003176:	e002      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_RCC_GetSysClockFreq+0x204>)
 800317a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800317c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800317e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003180:	4618      	mov	r0, r3
 8003182:	3750      	adds	r7, #80	; 0x50
 8003184:	46bd      	mov	sp, r7
 8003186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	00f42400 	.word	0x00f42400
 8003194:	007a1200 	.word	0x007a1200

08003198 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800319c:	4b03      	ldr	r3, [pc, #12]	; (80031ac <HAL_RCC_GetHCLKFreq+0x14>)
 800319e:	681b      	ldr	r3, [r3, #0]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	20000000 	.word	0x20000000

080031b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031b4:	f7ff fff0 	bl	8003198 <HAL_RCC_GetHCLKFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	0a9b      	lsrs	r3, r3, #10
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	4903      	ldr	r1, [pc, #12]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	08007d70 	.word	0x08007d70

080031d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031dc:	f7ff ffdc 	bl	8003198 <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0b5b      	lsrs	r3, r3, #13
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4903      	ldr	r1, [pc, #12]	; (80031fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	08007d70 	.word	0x08007d70

08003200 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	220f      	movs	r2, #15
 800320e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_RCC_GetClockConfig+0x5c>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0203 	and.w	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800321c:	4b0f      	ldr	r3, [pc, #60]	; (800325c <HAL_RCC_GetClockConfig+0x5c>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <HAL_RCC_GetClockConfig+0x5c>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCC_GetClockConfig+0x5c>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	08db      	lsrs	r3, r3, #3
 800323a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003242:	4b07      	ldr	r3, [pc, #28]	; (8003260 <HAL_RCC_GetClockConfig+0x60>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 020f 	and.w	r2, r3, #15
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	601a      	str	r2, [r3, #0]
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800
 8003260:	40023c00 	.word	0x40023c00

08003264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d012      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800328c:	4b69      	ldr	r3, [pc, #420]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a68      	ldr	r2, [pc, #416]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003292:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003296:	6093      	str	r3, [r2, #8]
 8003298:	4b66      	ldr	r3, [pc, #408]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a0:	4964      	ldr	r1, [pc, #400]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80032ae:	2301      	movs	r3, #1
 80032b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d017      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032be:	4b5d      	ldr	r3, [pc, #372]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	4959      	ldr	r1, [pc, #356]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032dc:	d101      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80032de:	2301      	movs	r3, #1
 80032e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032ea:	2301      	movs	r3, #1
 80032ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d017      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032fa:	4b4e      	ldr	r3, [pc, #312]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003300:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	494a      	ldr	r1, [pc, #296]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003318:	d101      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800331a:	2301      	movs	r3, #1
 800331c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003326:	2301      	movs	r3, #1
 8003328:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003336:	2301      	movs	r3, #1
 8003338:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 808b 	beq.w	800345e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003348:	4b3a      	ldr	r3, [pc, #232]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	4a39      	ldr	r2, [pc, #228]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003352:	6413      	str	r3, [r2, #64]	; 0x40
 8003354:	4b37      	ldr	r3, [pc, #220]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003360:	4b35      	ldr	r3, [pc, #212]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a34      	ldr	r2, [pc, #208]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336c:	f7fd ff42 	bl	80011f4 <HAL_GetTick>
 8003370:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003374:	f7fd ff3e 	bl	80011f4 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	; 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e38f      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003386:	4b2c      	ldr	r3, [pc, #176]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003392:	4b28      	ldr	r3, [pc, #160]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d035      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d02e      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033b0:	4b20      	ldr	r3, [pc, #128]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033ba:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033c6:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	4a1a      	ldr	r2, [pc, #104]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80033d2:	4a18      	ldr	r2, [pc, #96]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033d8:	4b16      	ldr	r3, [pc, #88]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d114      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fd ff06 	bl	80011f4 <HAL_GetTick>
 80033e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ea:	e00a      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ec:	f7fd ff02 	bl	80011f4 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e351      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003402:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0ee      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800341a:	d111      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800342a:	400b      	ands	r3, r1
 800342c:	4901      	ldr	r1, [pc, #4]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342e:	4313      	orrs	r3, r2
 8003430:	608b      	str	r3, [r1, #8]
 8003432:	e00b      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003434:	40023800 	.word	0x40023800
 8003438:	40007000 	.word	0x40007000
 800343c:	0ffffcff 	.word	0x0ffffcff
 8003440:	4bac      	ldr	r3, [pc, #688]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4aab      	ldr	r2, [pc, #684]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003446:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800344a:	6093      	str	r3, [r2, #8]
 800344c:	4ba9      	ldr	r3, [pc, #676]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800344e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003458:	49a6      	ldr	r1, [pc, #664]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345a:	4313      	orrs	r3, r2
 800345c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b00      	cmp	r3, #0
 8003468:	d010      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800346a:	4ba2      	ldr	r3, [pc, #648]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800346c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003470:	4aa0      	ldr	r2, [pc, #640]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003476:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800347a:	4b9e      	ldr	r3, [pc, #632]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800347c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	499b      	ldr	r1, [pc, #620]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003498:	4b96      	ldr	r3, [pc, #600]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a6:	4993      	ldr	r1, [pc, #588]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034ba:	4b8e      	ldr	r3, [pc, #568]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c8:	498a      	ldr	r1, [pc, #552]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034dc:	4b85      	ldr	r3, [pc, #532]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ea:	4982      	ldr	r1, [pc, #520]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034fe:	4b7d      	ldr	r3, [pc, #500]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4979      	ldr	r1, [pc, #484]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003520:	4b74      	ldr	r3, [pc, #464]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f023 0203 	bic.w	r2, r3, #3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	4971      	ldr	r1, [pc, #452]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003542:	4b6c      	ldr	r3, [pc, #432]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	f023 020c 	bic.w	r2, r3, #12
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003550:	4968      	ldr	r1, [pc, #416]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003564:	4b63      	ldr	r3, [pc, #396]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003572:	4960      	ldr	r1, [pc, #384]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003586:	4b5b      	ldr	r3, [pc, #364]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003594:	4957      	ldr	r1, [pc, #348]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035a8:	4b52      	ldr	r3, [pc, #328]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	494f      	ldr	r1, [pc, #316]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035ca:	4b4a      	ldr	r3, [pc, #296]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	4946      	ldr	r1, [pc, #280]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035ec:	4b41      	ldr	r3, [pc, #260]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fa:	493e      	ldr	r1, [pc, #248]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800360e:	4b39      	ldr	r3, [pc, #228]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361c:	4935      	ldr	r1, [pc, #212]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003630:	4b30      	ldr	r3, [pc, #192]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800363e:	492d      	ldr	r1, [pc, #180]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d011      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003652:	4b28      	ldr	r3, [pc, #160]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003658:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003660:	4924      	ldr	r1, [pc, #144]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800366c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003670:	d101      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003672:	2301      	movs	r3, #1
 8003674:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003682:	2301      	movs	r3, #1
 8003684:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003692:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003698:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a0:	4914      	ldr	r1, [pc, #80]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c4:	490b      	ldr	r1, [pc, #44]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00f      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80036d8:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e8:	4902      	ldr	r1, [pc, #8]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036f0:	e002      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00b      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003704:	4b8a      	ldr	r3, [pc, #552]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800370a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003714:	4986      	ldr	r1, [pc, #536]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00b      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003728:	4b81      	ldr	r3, [pc, #516]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800372a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800372e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003738:	497d      	ldr	r1, [pc, #500]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d006      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80d6 	beq.w	8003900 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003754:	4b76      	ldr	r3, [pc, #472]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a75      	ldr	r2, [pc, #468]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800375a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800375e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003760:	f7fd fd48 	bl	80011f4 <HAL_GetTick>
 8003764:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003768:	f7fd fd44 	bl	80011f4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e195      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800377a:	4b6d      	ldr	r3, [pc, #436]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d021      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003796:	2b00      	cmp	r3, #0
 8003798:	d11d      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800379a:	4b65      	ldr	r3, [pc, #404]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800379c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037a8:	4b61      	ldr	r3, [pc, #388]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ae:	0e1b      	lsrs	r3, r3, #24
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	019a      	lsls	r2, r3, #6
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	041b      	lsls	r3, r3, #16
 80037c0:	431a      	orrs	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	071b      	lsls	r3, r3, #28
 80037ce:	4958      	ldr	r1, [pc, #352]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d004      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x588>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d02e      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003800:	d129      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003802:	4b4b      	ldr	r3, [pc, #300]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003810:	4b47      	ldr	r3, [pc, #284]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003816:	0f1b      	lsrs	r3, r3, #28
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	019a      	lsls	r2, r3, #6
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	061b      	lsls	r3, r3, #24
 8003830:	431a      	orrs	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	071b      	lsls	r3, r3, #28
 8003836:	493e      	ldr	r1, [pc, #248]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800383e:	4b3c      	ldr	r3, [pc, #240]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003844:	f023 021f 	bic.w	r2, r3, #31
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	3b01      	subs	r3, #1
 800384e:	4938      	ldr	r1, [pc, #224]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d01d      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003862:	4b33      	ldr	r3, [pc, #204]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003868:	0e1b      	lsrs	r3, r3, #24
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003870:	4b2f      	ldr	r3, [pc, #188]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003876:	0f1b      	lsrs	r3, r3, #28
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	019a      	lsls	r2, r3, #6
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	041b      	lsls	r3, r3, #16
 800388a:	431a      	orrs	r2, r3
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	431a      	orrs	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	071b      	lsls	r3, r3, #28
 8003896:	4926      	ldr	r1, [pc, #152]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d011      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	019a      	lsls	r2, r3, #6
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	041b      	lsls	r3, r3, #16
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	061b      	lsls	r3, r3, #24
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	071b      	lsls	r3, r3, #28
 80038c6:	491a      	ldr	r1, [pc, #104]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038ce:	4b18      	ldr	r3, [pc, #96]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a17      	ldr	r2, [pc, #92]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038da:	f7fd fc8b 	bl	80011f4 <HAL_GetTick>
 80038de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038e2:	f7fd fc87 	bl	80011f4 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b64      	cmp	r3, #100	; 0x64
 80038ee:	d901      	bls.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0d8      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038f4:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	2b01      	cmp	r3, #1
 8003904:	f040 80ce 	bne.w	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a08      	ldr	r2, [pc, #32]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800390e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003914:	f7fd fc6e 	bl	80011f4 <HAL_GetTick>
 8003918:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800391a:	e00b      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800391c:	f7fd fc6a 	bl	80011f4 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d904      	bls.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e0bb      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003934:	4b5e      	ldr	r3, [pc, #376]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800393c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003940:	d0ec      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800395e:	2b00      	cmp	r3, #0
 8003960:	d02e      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d12a      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800396a:	4b51      	ldr	r3, [pc, #324]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	0c1b      	lsrs	r3, r3, #16
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003978:	4b4d      	ldr	r3, [pc, #308]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	0f1b      	lsrs	r3, r3, #28
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	019a      	lsls	r2, r3, #6
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	061b      	lsls	r3, r3, #24
 8003998:	431a      	orrs	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	071b      	lsls	r3, r3, #28
 800399e:	4944      	ldr	r1, [pc, #272]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039a6:	4b42      	ldr	r3, [pc, #264]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	3b01      	subs	r3, #1
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	493d      	ldr	r1, [pc, #244]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d022      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039d4:	d11d      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039d6:	4b36      	ldr	r3, [pc, #216]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	0e1b      	lsrs	r3, r3, #24
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039e4:	4b32      	ldr	r3, [pc, #200]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	0f1b      	lsrs	r3, r3, #28
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	019a      	lsls	r2, r3, #6
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	041b      	lsls	r3, r3, #16
 80039fe:	431a      	orrs	r2, r3
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	061b      	lsls	r3, r3, #24
 8003a04:	431a      	orrs	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	071b      	lsls	r3, r3, #28
 8003a0a:	4929      	ldr	r1, [pc, #164]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d028      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a1e:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a24:	0e1b      	lsrs	r3, r3, #24
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a2c:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	0c1b      	lsrs	r3, r3, #16
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	019a      	lsls	r2, r3, #6
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	431a      	orrs	r2, r3
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	061b      	lsls	r3, r3, #24
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	071b      	lsls	r3, r3, #28
 8003a52:	4917      	ldr	r1, [pc, #92]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	4911      	ldr	r1, [pc, #68]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a70:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0e      	ldr	r2, [pc, #56]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7c:	f7fd fbba 	bl	80011f4 <HAL_GetTick>
 8003a80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a84:	f7fd fbb6 	bl	80011f4 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	; 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e007      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa2:	d1ef      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800

08003ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e049      	b.n	8003b5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f841 	bl	8003b62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4619      	mov	r1, r3
 8003af2:	4610      	mov	r0, r2
 8003af4:	f000 fa00 	bl	8003ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d001      	beq.n	8003b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e054      	b.n	8003c3a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a26      	ldr	r2, [pc, #152]	; (8003c48 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d022      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x80>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bba:	d01d      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x80>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a22      	ldr	r2, [pc, #136]	; (8003c4c <HAL_TIM_Base_Start_IT+0xd4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d018      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x80>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a21      	ldr	r2, [pc, #132]	; (8003c50 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d013      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x80>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1f      	ldr	r2, [pc, #124]	; (8003c54 <HAL_TIM_Base_Start_IT+0xdc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00e      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x80>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1e      	ldr	r2, [pc, #120]	; (8003c58 <HAL_TIM_Base_Start_IT+0xe0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d009      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x80>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <HAL_TIM_Base_Start_IT+0xe4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x80>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1b      	ldr	r2, [pc, #108]	; (8003c60 <HAL_TIM_Base_Start_IT+0xe8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d115      	bne.n	8003c24 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	4b19      	ldr	r3, [pc, #100]	; (8003c64 <HAL_TIM_Base_Start_IT+0xec>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b06      	cmp	r3, #6
 8003c08:	d015      	beq.n	8003c36 <HAL_TIM_Base_Start_IT+0xbe>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c10:	d011      	beq.n	8003c36 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c22:	e008      	b.n	8003c36 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	e000      	b.n	8003c38 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800
 8003c54:	40000c00 	.word	0x40000c00
 8003c58:	40010400 	.word	0x40010400
 8003c5c:	40014000 	.word	0x40014000
 8003c60:	40001800 	.word	0x40001800
 8003c64:	00010007 	.word	0x00010007

08003c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d122      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d11b      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0202 	mvn.w	r2, #2
 8003c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f905 	bl	8003eba <HAL_TIM_IC_CaptureCallback>
 8003cb0:	e005      	b.n	8003cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f8f7 	bl	8003ea6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f908 	bl	8003ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d122      	bne.n	8003d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d11b      	bne.n	8003d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0204 	mvn.w	r2, #4
 8003ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2202      	movs	r2, #2
 8003cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f8db 	bl	8003eba <HAL_TIM_IC_CaptureCallback>
 8003d04:	e005      	b.n	8003d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f8cd 	bl	8003ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f8de 	bl	8003ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d122      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d11b      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0208 	mvn.w	r2, #8
 8003d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2204      	movs	r2, #4
 8003d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f8b1 	bl	8003eba <HAL_TIM_IC_CaptureCallback>
 8003d58:	e005      	b.n	8003d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f8a3 	bl	8003ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f8b4 	bl	8003ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b10      	cmp	r3, #16
 8003d78:	d122      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d11b      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0210 	mvn.w	r2, #16
 8003d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2208      	movs	r2, #8
 8003d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f887 	bl	8003eba <HAL_TIM_IC_CaptureCallback>
 8003dac:	e005      	b.n	8003dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f879 	bl	8003ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f88a 	bl	8003ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d10e      	bne.n	8003dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d107      	bne.n	8003dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0201 	mvn.w	r2, #1
 8003de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fc ff9e 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df6:	2b80      	cmp	r3, #128	; 0x80
 8003df8:	d10e      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e04:	2b80      	cmp	r3, #128	; 0x80
 8003e06:	d107      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f91a 	bl	800404c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e26:	d10e      	bne.n	8003e46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e32:	2b80      	cmp	r3, #128	; 0x80
 8003e34:	d107      	bne.n	8003e46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f90d 	bl	8004060 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	d10e      	bne.n	8003e72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d107      	bne.n	8003e72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f838 	bl	8003ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d10e      	bne.n	8003e9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d107      	bne.n	8003e9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f06f 0220 	mvn.w	r2, #32
 8003e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f8cd 	bl	8004038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a40      	ldr	r2, [pc, #256]	; (800400c <TIM_Base_SetConfig+0x114>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d013      	beq.n	8003f38 <TIM_Base_SetConfig+0x40>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f16:	d00f      	beq.n	8003f38 <TIM_Base_SetConfig+0x40>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a3d      	ldr	r2, [pc, #244]	; (8004010 <TIM_Base_SetConfig+0x118>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <TIM_Base_SetConfig+0x40>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a3c      	ldr	r2, [pc, #240]	; (8004014 <TIM_Base_SetConfig+0x11c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d007      	beq.n	8003f38 <TIM_Base_SetConfig+0x40>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a3b      	ldr	r2, [pc, #236]	; (8004018 <TIM_Base_SetConfig+0x120>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a3a      	ldr	r2, [pc, #232]	; (800401c <TIM_Base_SetConfig+0x124>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d108      	bne.n	8003f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a2f      	ldr	r2, [pc, #188]	; (800400c <TIM_Base_SetConfig+0x114>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d02b      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f58:	d027      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a2c      	ldr	r2, [pc, #176]	; (8004010 <TIM_Base_SetConfig+0x118>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d023      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a2b      	ldr	r2, [pc, #172]	; (8004014 <TIM_Base_SetConfig+0x11c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01f      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2a      	ldr	r2, [pc, #168]	; (8004018 <TIM_Base_SetConfig+0x120>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d01b      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a29      	ldr	r2, [pc, #164]	; (800401c <TIM_Base_SetConfig+0x124>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d017      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a28      	ldr	r2, [pc, #160]	; (8004020 <TIM_Base_SetConfig+0x128>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a27      	ldr	r2, [pc, #156]	; (8004024 <TIM_Base_SetConfig+0x12c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00f      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a26      	ldr	r2, [pc, #152]	; (8004028 <TIM_Base_SetConfig+0x130>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00b      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a25      	ldr	r2, [pc, #148]	; (800402c <TIM_Base_SetConfig+0x134>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a24      	ldr	r2, [pc, #144]	; (8004030 <TIM_Base_SetConfig+0x138>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d003      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a23      	ldr	r2, [pc, #140]	; (8004034 <TIM_Base_SetConfig+0x13c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d108      	bne.n	8003fbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a0a      	ldr	r2, [pc, #40]	; (800400c <TIM_Base_SetConfig+0x114>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_Base_SetConfig+0xf8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a0c      	ldr	r2, [pc, #48]	; (800401c <TIM_Base_SetConfig+0x124>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d103      	bne.n	8003ff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	615a      	str	r2, [r3, #20]
}
 8003ffe:	bf00      	nop
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40010000 	.word	0x40010000
 8004010:	40000400 	.word	0x40000400
 8004014:	40000800 	.word	0x40000800
 8004018:	40000c00 	.word	0x40000c00
 800401c:	40010400 	.word	0x40010400
 8004020:	40014000 	.word	0x40014000
 8004024:	40014400 	.word	0x40014400
 8004028:	40014800 	.word	0x40014800
 800402c:	40001800 	.word	0x40001800
 8004030:	40001c00 	.word	0x40001c00
 8004034:	40002000 	.word	0x40002000

08004038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e040      	b.n	8004108 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fc fed2 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2224      	movs	r2, #36	; 0x24
 80040a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0201 	bic.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f82c 	bl	8004110 <UART_SetConfig>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e022      	b.n	8004108 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fa84 	bl	80045d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fb0b 	bl	800471c <UART_CheckIdleState>
 8004106:	4603      	mov	r3, r0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	4ba6      	ldr	r3, [pc, #664]	; (80043d4 <UART_SetConfig+0x2c4>)
 800413c:	4013      	ands	r3, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	6979      	ldr	r1, [r7, #20]
 8004144:	430b      	orrs	r3, r1
 8004146:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	430a      	orrs	r2, r1
 8004180:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a94      	ldr	r2, [pc, #592]	; (80043d8 <UART_SetConfig+0x2c8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d120      	bne.n	80041ce <UART_SetConfig+0xbe>
 800418c:	4b93      	ldr	r3, [pc, #588]	; (80043dc <UART_SetConfig+0x2cc>)
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	2b03      	cmp	r3, #3
 8004198:	d816      	bhi.n	80041c8 <UART_SetConfig+0xb8>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <UART_SetConfig+0x90>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041b1 	.word	0x080041b1
 80041a4:	080041bd 	.word	0x080041bd
 80041a8:	080041b7 	.word	0x080041b7
 80041ac:	080041c3 	.word	0x080041c3
 80041b0:	2301      	movs	r3, #1
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e150      	b.n	8004458 <UART_SetConfig+0x348>
 80041b6:	2302      	movs	r3, #2
 80041b8:	77fb      	strb	r3, [r7, #31]
 80041ba:	e14d      	b.n	8004458 <UART_SetConfig+0x348>
 80041bc:	2304      	movs	r3, #4
 80041be:	77fb      	strb	r3, [r7, #31]
 80041c0:	e14a      	b.n	8004458 <UART_SetConfig+0x348>
 80041c2:	2308      	movs	r3, #8
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e147      	b.n	8004458 <UART_SetConfig+0x348>
 80041c8:	2310      	movs	r3, #16
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e144      	b.n	8004458 <UART_SetConfig+0x348>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a83      	ldr	r2, [pc, #524]	; (80043e0 <UART_SetConfig+0x2d0>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d132      	bne.n	800423e <UART_SetConfig+0x12e>
 80041d8:	4b80      	ldr	r3, [pc, #512]	; (80043dc <UART_SetConfig+0x2cc>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	2b0c      	cmp	r3, #12
 80041e4:	d828      	bhi.n	8004238 <UART_SetConfig+0x128>
 80041e6:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <UART_SetConfig+0xdc>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	08004221 	.word	0x08004221
 80041f0:	08004239 	.word	0x08004239
 80041f4:	08004239 	.word	0x08004239
 80041f8:	08004239 	.word	0x08004239
 80041fc:	0800422d 	.word	0x0800422d
 8004200:	08004239 	.word	0x08004239
 8004204:	08004239 	.word	0x08004239
 8004208:	08004239 	.word	0x08004239
 800420c:	08004227 	.word	0x08004227
 8004210:	08004239 	.word	0x08004239
 8004214:	08004239 	.word	0x08004239
 8004218:	08004239 	.word	0x08004239
 800421c:	08004233 	.word	0x08004233
 8004220:	2300      	movs	r3, #0
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	e118      	b.n	8004458 <UART_SetConfig+0x348>
 8004226:	2302      	movs	r3, #2
 8004228:	77fb      	strb	r3, [r7, #31]
 800422a:	e115      	b.n	8004458 <UART_SetConfig+0x348>
 800422c:	2304      	movs	r3, #4
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e112      	b.n	8004458 <UART_SetConfig+0x348>
 8004232:	2308      	movs	r3, #8
 8004234:	77fb      	strb	r3, [r7, #31]
 8004236:	e10f      	b.n	8004458 <UART_SetConfig+0x348>
 8004238:	2310      	movs	r3, #16
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e10c      	b.n	8004458 <UART_SetConfig+0x348>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a68      	ldr	r2, [pc, #416]	; (80043e4 <UART_SetConfig+0x2d4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d120      	bne.n	800428a <UART_SetConfig+0x17a>
 8004248:	4b64      	ldr	r3, [pc, #400]	; (80043dc <UART_SetConfig+0x2cc>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004252:	2b30      	cmp	r3, #48	; 0x30
 8004254:	d013      	beq.n	800427e <UART_SetConfig+0x16e>
 8004256:	2b30      	cmp	r3, #48	; 0x30
 8004258:	d814      	bhi.n	8004284 <UART_SetConfig+0x174>
 800425a:	2b20      	cmp	r3, #32
 800425c:	d009      	beq.n	8004272 <UART_SetConfig+0x162>
 800425e:	2b20      	cmp	r3, #32
 8004260:	d810      	bhi.n	8004284 <UART_SetConfig+0x174>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <UART_SetConfig+0x15c>
 8004266:	2b10      	cmp	r3, #16
 8004268:	d006      	beq.n	8004278 <UART_SetConfig+0x168>
 800426a:	e00b      	b.n	8004284 <UART_SetConfig+0x174>
 800426c:	2300      	movs	r3, #0
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e0f2      	b.n	8004458 <UART_SetConfig+0x348>
 8004272:	2302      	movs	r3, #2
 8004274:	77fb      	strb	r3, [r7, #31]
 8004276:	e0ef      	b.n	8004458 <UART_SetConfig+0x348>
 8004278:	2304      	movs	r3, #4
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e0ec      	b.n	8004458 <UART_SetConfig+0x348>
 800427e:	2308      	movs	r3, #8
 8004280:	77fb      	strb	r3, [r7, #31]
 8004282:	e0e9      	b.n	8004458 <UART_SetConfig+0x348>
 8004284:	2310      	movs	r3, #16
 8004286:	77fb      	strb	r3, [r7, #31]
 8004288:	e0e6      	b.n	8004458 <UART_SetConfig+0x348>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a56      	ldr	r2, [pc, #344]	; (80043e8 <UART_SetConfig+0x2d8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d120      	bne.n	80042d6 <UART_SetConfig+0x1c6>
 8004294:	4b51      	ldr	r3, [pc, #324]	; (80043dc <UART_SetConfig+0x2cc>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800429e:	2bc0      	cmp	r3, #192	; 0xc0
 80042a0:	d013      	beq.n	80042ca <UART_SetConfig+0x1ba>
 80042a2:	2bc0      	cmp	r3, #192	; 0xc0
 80042a4:	d814      	bhi.n	80042d0 <UART_SetConfig+0x1c0>
 80042a6:	2b80      	cmp	r3, #128	; 0x80
 80042a8:	d009      	beq.n	80042be <UART_SetConfig+0x1ae>
 80042aa:	2b80      	cmp	r3, #128	; 0x80
 80042ac:	d810      	bhi.n	80042d0 <UART_SetConfig+0x1c0>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <UART_SetConfig+0x1a8>
 80042b2:	2b40      	cmp	r3, #64	; 0x40
 80042b4:	d006      	beq.n	80042c4 <UART_SetConfig+0x1b4>
 80042b6:	e00b      	b.n	80042d0 <UART_SetConfig+0x1c0>
 80042b8:	2300      	movs	r3, #0
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e0cc      	b.n	8004458 <UART_SetConfig+0x348>
 80042be:	2302      	movs	r3, #2
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e0c9      	b.n	8004458 <UART_SetConfig+0x348>
 80042c4:	2304      	movs	r3, #4
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e0c6      	b.n	8004458 <UART_SetConfig+0x348>
 80042ca:	2308      	movs	r3, #8
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e0c3      	b.n	8004458 <UART_SetConfig+0x348>
 80042d0:	2310      	movs	r3, #16
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e0c0      	b.n	8004458 <UART_SetConfig+0x348>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a44      	ldr	r2, [pc, #272]	; (80043ec <UART_SetConfig+0x2dc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d125      	bne.n	800432c <UART_SetConfig+0x21c>
 80042e0:	4b3e      	ldr	r3, [pc, #248]	; (80043dc <UART_SetConfig+0x2cc>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ee:	d017      	beq.n	8004320 <UART_SetConfig+0x210>
 80042f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f4:	d817      	bhi.n	8004326 <UART_SetConfig+0x216>
 80042f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042fa:	d00b      	beq.n	8004314 <UART_SetConfig+0x204>
 80042fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004300:	d811      	bhi.n	8004326 <UART_SetConfig+0x216>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <UART_SetConfig+0x1fe>
 8004306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430a:	d006      	beq.n	800431a <UART_SetConfig+0x20a>
 800430c:	e00b      	b.n	8004326 <UART_SetConfig+0x216>
 800430e:	2300      	movs	r3, #0
 8004310:	77fb      	strb	r3, [r7, #31]
 8004312:	e0a1      	b.n	8004458 <UART_SetConfig+0x348>
 8004314:	2302      	movs	r3, #2
 8004316:	77fb      	strb	r3, [r7, #31]
 8004318:	e09e      	b.n	8004458 <UART_SetConfig+0x348>
 800431a:	2304      	movs	r3, #4
 800431c:	77fb      	strb	r3, [r7, #31]
 800431e:	e09b      	b.n	8004458 <UART_SetConfig+0x348>
 8004320:	2308      	movs	r3, #8
 8004322:	77fb      	strb	r3, [r7, #31]
 8004324:	e098      	b.n	8004458 <UART_SetConfig+0x348>
 8004326:	2310      	movs	r3, #16
 8004328:	77fb      	strb	r3, [r7, #31]
 800432a:	e095      	b.n	8004458 <UART_SetConfig+0x348>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a2f      	ldr	r2, [pc, #188]	; (80043f0 <UART_SetConfig+0x2e0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d125      	bne.n	8004382 <UART_SetConfig+0x272>
 8004336:	4b29      	ldr	r3, [pc, #164]	; (80043dc <UART_SetConfig+0x2cc>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004344:	d017      	beq.n	8004376 <UART_SetConfig+0x266>
 8004346:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800434a:	d817      	bhi.n	800437c <UART_SetConfig+0x26c>
 800434c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004350:	d00b      	beq.n	800436a <UART_SetConfig+0x25a>
 8004352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004356:	d811      	bhi.n	800437c <UART_SetConfig+0x26c>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <UART_SetConfig+0x254>
 800435c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004360:	d006      	beq.n	8004370 <UART_SetConfig+0x260>
 8004362:	e00b      	b.n	800437c <UART_SetConfig+0x26c>
 8004364:	2301      	movs	r3, #1
 8004366:	77fb      	strb	r3, [r7, #31]
 8004368:	e076      	b.n	8004458 <UART_SetConfig+0x348>
 800436a:	2302      	movs	r3, #2
 800436c:	77fb      	strb	r3, [r7, #31]
 800436e:	e073      	b.n	8004458 <UART_SetConfig+0x348>
 8004370:	2304      	movs	r3, #4
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e070      	b.n	8004458 <UART_SetConfig+0x348>
 8004376:	2308      	movs	r3, #8
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e06d      	b.n	8004458 <UART_SetConfig+0x348>
 800437c:	2310      	movs	r3, #16
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e06a      	b.n	8004458 <UART_SetConfig+0x348>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <UART_SetConfig+0x2e4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d138      	bne.n	80043fe <UART_SetConfig+0x2ee>
 800438c:	4b13      	ldr	r3, [pc, #76]	; (80043dc <UART_SetConfig+0x2cc>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004396:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800439a:	d017      	beq.n	80043cc <UART_SetConfig+0x2bc>
 800439c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043a0:	d82a      	bhi.n	80043f8 <UART_SetConfig+0x2e8>
 80043a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a6:	d00b      	beq.n	80043c0 <UART_SetConfig+0x2b0>
 80043a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ac:	d824      	bhi.n	80043f8 <UART_SetConfig+0x2e8>
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <UART_SetConfig+0x2aa>
 80043b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b6:	d006      	beq.n	80043c6 <UART_SetConfig+0x2b6>
 80043b8:	e01e      	b.n	80043f8 <UART_SetConfig+0x2e8>
 80043ba:	2300      	movs	r3, #0
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e04b      	b.n	8004458 <UART_SetConfig+0x348>
 80043c0:	2302      	movs	r3, #2
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e048      	b.n	8004458 <UART_SetConfig+0x348>
 80043c6:	2304      	movs	r3, #4
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e045      	b.n	8004458 <UART_SetConfig+0x348>
 80043cc:	2308      	movs	r3, #8
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	e042      	b.n	8004458 <UART_SetConfig+0x348>
 80043d2:	bf00      	nop
 80043d4:	efff69f3 	.word	0xefff69f3
 80043d8:	40011000 	.word	0x40011000
 80043dc:	40023800 	.word	0x40023800
 80043e0:	40004400 	.word	0x40004400
 80043e4:	40004800 	.word	0x40004800
 80043e8:	40004c00 	.word	0x40004c00
 80043ec:	40005000 	.word	0x40005000
 80043f0:	40011400 	.word	0x40011400
 80043f4:	40007800 	.word	0x40007800
 80043f8:	2310      	movs	r3, #16
 80043fa:	77fb      	strb	r3, [r7, #31]
 80043fc:	e02c      	b.n	8004458 <UART_SetConfig+0x348>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a72      	ldr	r2, [pc, #456]	; (80045cc <UART_SetConfig+0x4bc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d125      	bne.n	8004454 <UART_SetConfig+0x344>
 8004408:	4b71      	ldr	r3, [pc, #452]	; (80045d0 <UART_SetConfig+0x4c0>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004412:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004416:	d017      	beq.n	8004448 <UART_SetConfig+0x338>
 8004418:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800441c:	d817      	bhi.n	800444e <UART_SetConfig+0x33e>
 800441e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004422:	d00b      	beq.n	800443c <UART_SetConfig+0x32c>
 8004424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004428:	d811      	bhi.n	800444e <UART_SetConfig+0x33e>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <UART_SetConfig+0x326>
 800442e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004432:	d006      	beq.n	8004442 <UART_SetConfig+0x332>
 8004434:	e00b      	b.n	800444e <UART_SetConfig+0x33e>
 8004436:	2300      	movs	r3, #0
 8004438:	77fb      	strb	r3, [r7, #31]
 800443a:	e00d      	b.n	8004458 <UART_SetConfig+0x348>
 800443c:	2302      	movs	r3, #2
 800443e:	77fb      	strb	r3, [r7, #31]
 8004440:	e00a      	b.n	8004458 <UART_SetConfig+0x348>
 8004442:	2304      	movs	r3, #4
 8004444:	77fb      	strb	r3, [r7, #31]
 8004446:	e007      	b.n	8004458 <UART_SetConfig+0x348>
 8004448:	2308      	movs	r3, #8
 800444a:	77fb      	strb	r3, [r7, #31]
 800444c:	e004      	b.n	8004458 <UART_SetConfig+0x348>
 800444e:	2310      	movs	r3, #16
 8004450:	77fb      	strb	r3, [r7, #31]
 8004452:	e001      	b.n	8004458 <UART_SetConfig+0x348>
 8004454:	2310      	movs	r3, #16
 8004456:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004460:	d15b      	bne.n	800451a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004462:	7ffb      	ldrb	r3, [r7, #31]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d828      	bhi.n	80044ba <UART_SetConfig+0x3aa>
 8004468:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <UART_SetConfig+0x360>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	08004495 	.word	0x08004495
 8004474:	0800449d 	.word	0x0800449d
 8004478:	080044a5 	.word	0x080044a5
 800447c:	080044bb 	.word	0x080044bb
 8004480:	080044ab 	.word	0x080044ab
 8004484:	080044bb 	.word	0x080044bb
 8004488:	080044bb 	.word	0x080044bb
 800448c:	080044bb 	.word	0x080044bb
 8004490:	080044b3 	.word	0x080044b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004494:	f7fe fe8c 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 8004498:	61b8      	str	r0, [r7, #24]
        break;
 800449a:	e013      	b.n	80044c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800449c:	f7fe fe9c 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 80044a0:	61b8      	str	r0, [r7, #24]
        break;
 80044a2:	e00f      	b.n	80044c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a4:	4b4b      	ldr	r3, [pc, #300]	; (80045d4 <UART_SetConfig+0x4c4>)
 80044a6:	61bb      	str	r3, [r7, #24]
        break;
 80044a8:	e00c      	b.n	80044c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044aa:	f7fe fd6f 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 80044ae:	61b8      	str	r0, [r7, #24]
        break;
 80044b0:	e008      	b.n	80044c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b6:	61bb      	str	r3, [r7, #24]
        break;
 80044b8:	e004      	b.n	80044c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	77bb      	strb	r3, [r7, #30]
        break;
 80044c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d074      	beq.n	80045b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	005a      	lsls	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	441a      	add	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	fbb2 f3f3 	udiv	r3, r2, r3
 80044de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	2b0f      	cmp	r3, #15
 80044e4:	d916      	bls.n	8004514 <UART_SetConfig+0x404>
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ec:	d212      	bcs.n	8004514 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	f023 030f 	bic.w	r3, r3, #15
 80044f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	085b      	lsrs	r3, r3, #1
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	b29a      	uxth	r2, r3
 8004504:	89fb      	ldrh	r3, [r7, #14]
 8004506:	4313      	orrs	r3, r2
 8004508:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	89fa      	ldrh	r2, [r7, #14]
 8004510:	60da      	str	r2, [r3, #12]
 8004512:	e04f      	b.n	80045b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	77bb      	strb	r3, [r7, #30]
 8004518:	e04c      	b.n	80045b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800451a:	7ffb      	ldrb	r3, [r7, #31]
 800451c:	2b08      	cmp	r3, #8
 800451e:	d828      	bhi.n	8004572 <UART_SetConfig+0x462>
 8004520:	a201      	add	r2, pc, #4	; (adr r2, 8004528 <UART_SetConfig+0x418>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	0800454d 	.word	0x0800454d
 800452c:	08004555 	.word	0x08004555
 8004530:	0800455d 	.word	0x0800455d
 8004534:	08004573 	.word	0x08004573
 8004538:	08004563 	.word	0x08004563
 800453c:	08004573 	.word	0x08004573
 8004540:	08004573 	.word	0x08004573
 8004544:	08004573 	.word	0x08004573
 8004548:	0800456b 	.word	0x0800456b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800454c:	f7fe fe30 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 8004550:	61b8      	str	r0, [r7, #24]
        break;
 8004552:	e013      	b.n	800457c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004554:	f7fe fe40 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 8004558:	61b8      	str	r0, [r7, #24]
        break;
 800455a:	e00f      	b.n	800457c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800455c:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <UART_SetConfig+0x4c4>)
 800455e:	61bb      	str	r3, [r7, #24]
        break;
 8004560:	e00c      	b.n	800457c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004562:	f7fe fd13 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 8004566:	61b8      	str	r0, [r7, #24]
        break;
 8004568:	e008      	b.n	800457c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800456a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456e:	61bb      	str	r3, [r7, #24]
        break;
 8004570:	e004      	b.n	800457c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	77bb      	strb	r3, [r7, #30]
        break;
 800457a:	bf00      	nop
    }

    if (pclk != 0U)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d018      	beq.n	80045b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	085a      	lsrs	r2, r3, #1
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	441a      	add	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
 8004594:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b0f      	cmp	r3, #15
 800459a:	d909      	bls.n	80045b0 <UART_SetConfig+0x4a0>
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a2:	d205      	bcs.n	80045b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	e001      	b.n	80045b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3720      	adds	r7, #32
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40007c00 	.word	0x40007c00
 80045d0:	40023800 	.word	0x40023800
 80045d4:	00f42400 	.word	0x00f42400

080045d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01a      	beq.n	80046ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d6:	d10a      	bne.n	80046ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	605a      	str	r2, [r3, #4]
  }
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af02      	add	r7, sp, #8
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800472c:	f7fc fd62 	bl	80011f4 <HAL_GetTick>
 8004730:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b08      	cmp	r3, #8
 800473e:	d10e      	bne.n	800475e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f831 	bl	80047b6 <UART_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e027      	b.n	80047ae <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b04      	cmp	r3, #4
 800476a:	d10e      	bne.n	800478a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800476c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f81b 	bl	80047b6 <UART_WaitOnFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e011      	b.n	80047ae <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b09c      	sub	sp, #112	; 0x70
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	4613      	mov	r3, r2
 80047c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c6:	e0a7      	b.n	8004918 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ce:	f000 80a3 	beq.w	8004918 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d2:	f7fc fd0f 	bl	80011f4 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047de:	429a      	cmp	r2, r3
 80047e0:	d302      	bcc.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80047e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d13f      	bne.n	8004868 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047fc:	667b      	str	r3, [r7, #100]	; 0x64
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004806:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004808:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800480c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e6      	bne.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3308      	adds	r3, #8
 8004820:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	f023 0301 	bic.w	r3, r3, #1
 8004830:	663b      	str	r3, [r7, #96]	; 0x60
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3308      	adds	r3, #8
 8004838:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800483a:	64ba      	str	r2, [r7, #72]	; 0x48
 800483c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e5      	bne.n	800481a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e068      	b.n	800493a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	d050      	beq.n	8004918 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004884:	d148      	bne.n	8004918 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800488e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ae:	637b      	str	r3, [r7, #52]	; 0x34
 80048b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e6      	bne.n	8004890 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3308      	adds	r3, #8
 80048c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	613b      	str	r3, [r7, #16]
   return(result);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f023 0301 	bic.w	r3, r3, #1
 80048d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3308      	adds	r3, #8
 80048e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048e2:	623a      	str	r2, [r7, #32]
 80048e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e6:	69f9      	ldr	r1, [r7, #28]
 80048e8:	6a3a      	ldr	r2, [r7, #32]
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e5      	bne.n	80048c2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e010      	b.n	800493a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69da      	ldr	r2, [r3, #28]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	4013      	ands	r3, r2
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	429a      	cmp	r2, r3
 8004926:	bf0c      	ite	eq
 8004928:	2301      	moveq	r3, #1
 800492a:	2300      	movne	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	461a      	mov	r2, r3
 8004930:	79fb      	ldrb	r3, [r7, #7]
 8004932:	429a      	cmp	r2, r3
 8004934:	f43f af48 	beq.w	80047c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3770      	adds	r7, #112	; 0x70
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004944:	b084      	sub	sp, #16
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	f107 001c 	add.w	r0, r7, #28
 8004952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	2b01      	cmp	r3, #1
 800495a:	d120      	bne.n	800499e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	4b20      	ldr	r3, [pc, #128]	; (80049f0 <USB_CoreInit+0xac>)
 800496e:	4013      	ands	r3, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004982:	2b01      	cmp	r3, #1
 8004984:	d105      	bne.n	8004992 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fa96 	bl	8004ec4 <USB_CoreReset>
 8004998:	4603      	mov	r3, r0
 800499a:	73fb      	strb	r3, [r7, #15]
 800499c:	e010      	b.n	80049c0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa8a 	bl	8004ec4 <USB_CoreReset>
 80049b0:	4603      	mov	r3, r0
 80049b2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d10b      	bne.n	80049de <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f043 0206 	orr.w	r2, r3, #6
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f043 0220 	orr.w	r2, r3, #32
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049de:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049ea:	b004      	add	sp, #16
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	ffbdffbf 	.word	0xffbdffbf

080049f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f023 0201 	bic.w	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a32:	78fb      	ldrb	r3, [r7, #3]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d115      	bne.n	8004a64 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a44:	2001      	movs	r0, #1
 8004a46:	f7fc fbe1 	bl	800120c <HAL_Delay>
      ms++;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fa29 	bl	8004ea8 <USB_GetMode>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d01e      	beq.n	8004a9a <USB_SetCurrentMode+0x84>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b31      	cmp	r3, #49	; 0x31
 8004a60:	d9f0      	bls.n	8004a44 <USB_SetCurrentMode+0x2e>
 8004a62:	e01a      	b.n	8004a9a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d115      	bne.n	8004a96 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a76:	2001      	movs	r0, #1
 8004a78:	f7fc fbc8 	bl	800120c <HAL_Delay>
      ms++;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fa10 	bl	8004ea8 <USB_GetMode>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <USB_SetCurrentMode+0x84>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b31      	cmp	r3, #49	; 0x31
 8004a92:	d9f0      	bls.n	8004a76 <USB_SetCurrentMode+0x60>
 8004a94:	e001      	b.n	8004a9a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e005      	b.n	8004aa6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b32      	cmp	r3, #50	; 0x32
 8004a9e:	d101      	bne.n	8004aa4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b086      	sub	sp, #24
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004abe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	e009      	b.n	8004ae4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	3340      	adds	r3, #64	; 0x40
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	2200      	movs	r2, #0
 8004adc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b0e      	cmp	r3, #14
 8004ae8:	d9f2      	bls.n	8004ad0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d11c      	bne.n	8004b2a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004afe:	f043 0302 	orr.w	r3, r3, #2
 8004b02:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	e005      	b.n	8004b36 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2300      	movs	r3, #0
 8004b40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b48:	4619      	mov	r1, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b50:	461a      	mov	r2, r3
 8004b52:	680b      	ldr	r3, [r1, #0]
 8004b54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d10c      	bne.n	8004b76 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d104      	bne.n	8004b6c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b62:	2100      	movs	r1, #0
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f965 	bl	8004e34 <USB_SetDevSpeed>
 8004b6a:	e008      	b.n	8004b7e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f960 	bl	8004e34 <USB_SetDevSpeed>
 8004b74:	e003      	b.n	8004b7e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b76:	2103      	movs	r1, #3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f95b 	bl	8004e34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b7e:	2110      	movs	r1, #16
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f8f3 	bl	8004d6c <USB_FlushTxFifo>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f91f 	bl	8004dd4 <USB_FlushRxFifo>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	2300      	movs	r3, #0
 8004baa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	e043      	b.n	8004c52 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004be0:	d118      	bne.n	8004c14 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	e013      	b.n	8004c26 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e008      	b.n	8004c26 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	461a      	mov	r2, r3
 8004c22:	2300      	movs	r3, #0
 8004c24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c32:	461a      	mov	r2, r3
 8004c34:	2300      	movs	r3, #0
 8004c36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c44:	461a      	mov	r2, r3
 8004c46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d3b7      	bcc.n	8004bca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	e043      	b.n	8004ce8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c76:	d118      	bne.n	8004caa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	e013      	b.n	8004cbc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	e008      	b.n	8004cbc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	2300      	movs	r3, #0
 8004cba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc8:	461a      	mov	r2, r3
 8004cca:	2300      	movs	r3, #0
 8004ccc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ce0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d3b7      	bcc.n	8004c60 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d105      	bne.n	8004d24 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f043 0210 	orr.w	r2, r3, #16
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <USB_DevInit+0x2b4>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f043 0208 	orr.w	r2, r3, #8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d105      	bne.n	8004d54 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699a      	ldr	r2, [r3, #24]
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <USB_DevInit+0x2b8>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d60:	b004      	add	sp, #16
 8004d62:	4770      	bx	lr
 8004d64:	803c3800 	.word	0x803c3800
 8004d68:	40000004 	.word	0x40000004

08004d6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <USB_FlushTxFifo+0x64>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d901      	bls.n	8004d8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e01b      	b.n	8004dc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	daf2      	bge.n	8004d7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	019b      	lsls	r3, r3, #6
 8004d9c:	f043 0220 	orr.w	r2, r3, #32
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3301      	adds	r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4a08      	ldr	r2, [pc, #32]	; (8004dd0 <USB_FlushTxFifo+0x64>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d901      	bls.n	8004db6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e006      	b.n	8004dc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d0f0      	beq.n	8004da4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	00030d40 	.word	0x00030d40

08004dd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4a11      	ldr	r2, [pc, #68]	; (8004e30 <USB_FlushRxFifo+0x5c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d901      	bls.n	8004df2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e018      	b.n	8004e24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	daf2      	bge.n	8004de0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2210      	movs	r2, #16
 8004e02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3301      	adds	r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4a08      	ldr	r2, [pc, #32]	; (8004e30 <USB_FlushRxFifo+0x5c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e006      	b.n	8004e24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d0f0      	beq.n	8004e04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	00030d40 	.word	0x00030d40

08004e34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	68f9      	ldr	r1, [r7, #12]
 8004e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e54:	4313      	orrs	r3, r2
 8004e56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b085      	sub	sp, #20
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e80:	f023 0303 	bic.w	r3, r3, #3
 8004e84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e94:	f043 0302 	orr.w	r3, r3, #2
 8004e98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <USB_CoreReset+0x64>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e01b      	b.n	8004f1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	daf2      	bge.n	8004ed0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f043 0201 	orr.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3301      	adds	r3, #1
 8004efe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4a09      	ldr	r2, [pc, #36]	; (8004f28 <USB_CoreReset+0x64>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d901      	bls.n	8004f0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e006      	b.n	8004f1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d0f0      	beq.n	8004efa <USB_CoreReset+0x36>

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	00030d40 	.word	0x00030d40

08004f2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004f30:	bf00      	nop
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f42:	f3ef 8305 	mrs	r3, IPSR
 8004f46:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10f      	bne.n	8004f6e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f52:	607b      	str	r3, [r7, #4]
  return(result);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d105      	bne.n	8004f66 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f5e:	603b      	str	r3, [r7, #0]
  return(result);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <osKernelInitialize+0x3a>
 8004f66:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <osKernelInitialize+0x64>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d103      	bne.n	8004f76 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004f6e:	f06f 0305 	mvn.w	r3, #5
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e00c      	b.n	8004f90 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <osKernelInitialize+0x64>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d105      	bne.n	8004f8a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f7e:	4b08      	ldr	r3, [pc, #32]	; (8004fa0 <osKernelInitialize+0x64>)
 8004f80:	2201      	movs	r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	e002      	b.n	8004f90 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f90:	68fb      	ldr	r3, [r7, #12]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	20000714 	.word	0x20000714

08004fa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004faa:	f3ef 8305 	mrs	r3, IPSR
 8004fae:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10f      	bne.n	8004fd6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fba:	607b      	str	r3, [r7, #4]
  return(result);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d105      	bne.n	8004fce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fc2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fc6:	603b      	str	r3, [r7, #0]
  return(result);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <osKernelStart+0x3a>
 8004fce:	4b0f      	ldr	r3, [pc, #60]	; (800500c <osKernelStart+0x68>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d103      	bne.n	8004fde <osKernelStart+0x3a>
    stat = osErrorISR;
 8004fd6:	f06f 0305 	mvn.w	r3, #5
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e010      	b.n	8005000 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004fde:	4b0b      	ldr	r3, [pc, #44]	; (800500c <osKernelStart+0x68>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d109      	bne.n	8004ffa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004fe6:	f7ff ffa1 	bl	8004f2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004fea:	4b08      	ldr	r3, [pc, #32]	; (800500c <osKernelStart+0x68>)
 8004fec:	2202      	movs	r2, #2
 8004fee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ff0:	f001 f8ca 	bl	8006188 <vTaskStartScheduler>
      stat = osOK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e002      	b.n	8005000 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ffe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005000:	68fb      	ldr	r3, [r7, #12]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000714 	.word	0x20000714

08005010 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005010:	b580      	push	{r7, lr}
 8005012:	b090      	sub	sp, #64	; 0x40
 8005014:	af04      	add	r7, sp, #16
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800501c:	2300      	movs	r3, #0
 800501e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005020:	f3ef 8305 	mrs	r3, IPSR
 8005024:	61fb      	str	r3, [r7, #28]
  return(result);
 8005026:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005028:	2b00      	cmp	r3, #0
 800502a:	f040 808f 	bne.w	800514c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800502e:	f3ef 8310 	mrs	r3, PRIMASK
 8005032:	61bb      	str	r3, [r7, #24]
  return(result);
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d105      	bne.n	8005046 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800503a:	f3ef 8311 	mrs	r3, BASEPRI
 800503e:	617b      	str	r3, [r7, #20]
  return(result);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <osThreadNew+0x3e>
 8005046:	4b44      	ldr	r3, [pc, #272]	; (8005158 <osThreadNew+0x148>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d07e      	beq.n	800514c <osThreadNew+0x13c>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d07b      	beq.n	800514c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005058:	2318      	movs	r3, #24
 800505a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800505c:	2300      	movs	r3, #0
 800505e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005064:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d045      	beq.n	80050f8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <osThreadNew+0x6a>
        name = attr->name;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <osThreadNew+0x90>
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	2b38      	cmp	r3, #56	; 0x38
 8005092:	d805      	bhi.n	80050a0 <osThreadNew+0x90>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <osThreadNew+0x94>
        return (NULL);
 80050a0:	2300      	movs	r3, #0
 80050a2:	e054      	b.n	800514e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	089b      	lsrs	r3, r3, #2
 80050b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00e      	beq.n	80050da <osThreadNew+0xca>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2ba7      	cmp	r3, #167	; 0xa7
 80050c2:	d90a      	bls.n	80050da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d006      	beq.n	80050da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <osThreadNew+0xca>
        mem = 1;
 80050d4:	2301      	movs	r3, #1
 80050d6:	623b      	str	r3, [r7, #32]
 80050d8:	e010      	b.n	80050fc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10c      	bne.n	80050fc <osThreadNew+0xec>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d108      	bne.n	80050fc <osThreadNew+0xec>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d104      	bne.n	80050fc <osThreadNew+0xec>
          mem = 0;
 80050f2:	2300      	movs	r3, #0
 80050f4:	623b      	str	r3, [r7, #32]
 80050f6:	e001      	b.n	80050fc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d110      	bne.n	8005124 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800510a:	9202      	str	r2, [sp, #8]
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 fe3f 	bl	8005d9c <xTaskCreateStatic>
 800511e:	4603      	mov	r3, r0
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	e013      	b.n	800514c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d110      	bne.n	800514c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	b29a      	uxth	r2, r3
 800512e:	f107 0310 	add.w	r3, r7, #16
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fe90 	bl	8005e62 <xTaskCreate>
 8005142:	4603      	mov	r3, r0
 8005144:	2b01      	cmp	r3, #1
 8005146:	d001      	beq.n	800514c <osThreadNew+0x13c>
          hTask = NULL;
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800514c:	693b      	ldr	r3, [r7, #16]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3730      	adds	r7, #48	; 0x30
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20000714 	.word	0x20000714

0800515c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005164:	f3ef 8305 	mrs	r3, IPSR
 8005168:	613b      	str	r3, [r7, #16]
  return(result);
 800516a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10f      	bne.n	8005190 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005170:	f3ef 8310 	mrs	r3, PRIMASK
 8005174:	60fb      	str	r3, [r7, #12]
  return(result);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d105      	bne.n	8005188 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800517c:	f3ef 8311 	mrs	r3, BASEPRI
 8005180:	60bb      	str	r3, [r7, #8]
  return(result);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <osDelay+0x3c>
 8005188:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <osDelay+0x58>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d103      	bne.n	8005198 <osDelay+0x3c>
    stat = osErrorISR;
 8005190:	f06f 0305 	mvn.w	r3, #5
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	e007      	b.n	80051a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 ffba 	bl	800611c <vTaskDelay>
    }
  }

  return (stat);
 80051a8:	697b      	ldr	r3, [r7, #20]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000714 	.word	0x20000714

080051b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4a07      	ldr	r2, [pc, #28]	; (80051e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80051c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4a06      	ldr	r2, [pc, #24]	; (80051e8 <vApplicationGetIdleTaskMemory+0x30>)
 80051ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2280      	movs	r2, #128	; 0x80
 80051d4:	601a      	str	r2, [r3, #0]
}
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000718 	.word	0x20000718
 80051e8:	200007c0 	.word	0x200007c0

080051ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4a07      	ldr	r2, [pc, #28]	; (8005218 <vApplicationGetTimerTaskMemory+0x2c>)
 80051fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4a06      	ldr	r2, [pc, #24]	; (800521c <vApplicationGetTimerTaskMemory+0x30>)
 8005202:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800520a:	601a      	str	r2, [r3, #0]
}
 800520c:	bf00      	nop
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	200009c0 	.word	0x200009c0
 800521c:	20000a68 	.word	0x20000a68

08005220 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f103 0208 	add.w	r2, r3, #8
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005238:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f103 0208 	add.w	r2, r3, #8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f103 0208 	add.w	r2, r3, #8
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800527a:	b480      	push	{r7}
 800527c:	b085      	sub	sp, #20
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	601a      	str	r2, [r3, #0]
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052d8:	d103      	bne.n	80052e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	e00c      	b.n	80052fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3308      	adds	r3, #8
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e002      	b.n	80052f0 <vListInsert+0x2e>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d2f6      	bcs.n	80052ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	601a      	str	r2, [r3, #0]
}
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6892      	ldr	r2, [r2, #8]
 800534a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6852      	ldr	r2, [r2, #4]
 8005354:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	429a      	cmp	r2, r3
 800535e:	d103      	bne.n	8005368 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	1e5a      	subs	r2, r3, #1
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10c      	bne.n	80053b6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	b672      	cpsid	i
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	b662      	cpsie	i
 80053b0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80053b6:	f002 f8a9 	bl	800750c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c2:	68f9      	ldr	r1, [r7, #12]
 80053c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053c6:	fb01 f303 	mul.w	r3, r1, r3
 80053ca:	441a      	add	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e6:	3b01      	subs	r3, #1
 80053e8:	68f9      	ldr	r1, [r7, #12]
 80053ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053ec:	fb01 f303 	mul.w	r3, r1, r3
 80053f0:	441a      	add	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	22ff      	movs	r2, #255	; 0xff
 80053fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	22ff      	movs	r2, #255	; 0xff
 8005402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d114      	bne.n	8005436 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01a      	beq.n	800544a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3310      	adds	r3, #16
 8005418:	4618      	mov	r0, r3
 800541a:	f001 f95d 	bl	80066d8 <xTaskRemoveFromEventList>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d012      	beq.n	800544a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005424:	4b0c      	ldr	r3, [pc, #48]	; (8005458 <xQueueGenericReset+0xd0>)
 8005426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	e009      	b.n	800544a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3310      	adds	r3, #16
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff fef0 	bl	8005220 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3324      	adds	r3, #36	; 0x24
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff feeb 	bl	8005220 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800544a:	f002 f893 	bl	8007574 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800544e:	2301      	movs	r3, #1
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08e      	sub	sp, #56	; 0x38
 8005460:	af02      	add	r7, sp, #8
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10c      	bne.n	800548a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005474:	b672      	cpsid	i
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	b662      	cpsie	i
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10c      	bne.n	80054aa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	b672      	cpsid	i
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	b662      	cpsie	i
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <xQueueGenericCreateStatic+0x5a>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <xQueueGenericCreateStatic+0x5e>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <xQueueGenericCreateStatic+0x60>
 80054ba:	2300      	movs	r3, #0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10c      	bne.n	80054da <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	b672      	cpsid	i
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	b662      	cpsie	i
 80054d4:	623b      	str	r3, [r7, #32]
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d102      	bne.n	80054e6 <xQueueGenericCreateStatic+0x8a>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <xQueueGenericCreateStatic+0x8e>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <xQueueGenericCreateStatic+0x90>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10c      	bne.n	800550a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	b672      	cpsid	i
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	b662      	cpsie	i
 8005504:	61fb      	str	r3, [r7, #28]
}
 8005506:	bf00      	nop
 8005508:	e7fe      	b.n	8005508 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800550a:	2350      	movs	r3, #80	; 0x50
 800550c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b50      	cmp	r3, #80	; 0x50
 8005512:	d00c      	beq.n	800552e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	b672      	cpsid	i
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	b662      	cpsie	i
 8005528:	61bb      	str	r3, [r7, #24]
}
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800552e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00d      	beq.n	8005556 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005542:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	4613      	mov	r3, r2
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f805 	bl	8005560 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005558:	4618      	mov	r0, r3
 800555a:	3730      	adds	r7, #48	; 0x30
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d103      	bne.n	800557c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e002      	b.n	8005582 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800558e:	2101      	movs	r1, #1
 8005590:	69b8      	ldr	r0, [r7, #24]
 8005592:	f7ff fef9 	bl	8005388 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	78fa      	ldrb	r2, [r7, #3]
 800559a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800559e:	bf00      	nop
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08e      	sub	sp, #56	; 0x38
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055b6:	2300      	movs	r3, #0
 80055b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10c      	bne.n	80055de <xQueueGenericSend+0x36>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	b672      	cpsid	i
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	b662      	cpsie	i
 80055d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d103      	bne.n	80055ec <xQueueGenericSend+0x44>
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <xQueueGenericSend+0x48>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <xQueueGenericSend+0x4a>
 80055f0:	2300      	movs	r3, #0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10c      	bne.n	8005610 <xQueueGenericSend+0x68>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	b672      	cpsid	i
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	b662      	cpsie	i
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d103      	bne.n	800561e <xQueueGenericSend+0x76>
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <xQueueGenericSend+0x7a>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <xQueueGenericSend+0x7c>
 8005622:	2300      	movs	r3, #0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10c      	bne.n	8005642 <xQueueGenericSend+0x9a>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562c:	b672      	cpsid	i
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	b662      	cpsie	i
 800563c:	623b      	str	r3, [r7, #32]
}
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005642:	f001 fa13 	bl	8006a6c <xTaskGetSchedulerState>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d102      	bne.n	8005652 <xQueueGenericSend+0xaa>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <xQueueGenericSend+0xae>
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <xQueueGenericSend+0xb0>
 8005656:	2300      	movs	r3, #0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10c      	bne.n	8005676 <xQueueGenericSend+0xce>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	b672      	cpsid	i
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	b662      	cpsie	i
 8005670:	61fb      	str	r3, [r7, #28]
}
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005676:	f001 ff49 	bl	800750c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005682:	429a      	cmp	r2, r3
 8005684:	d302      	bcc.n	800568c <xQueueGenericSend+0xe4>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b02      	cmp	r3, #2
 800568a:	d129      	bne.n	80056e0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005692:	f000 fa15 	bl	8005ac0 <prvCopyDataToQueue>
 8005696:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	2b00      	cmp	r3, #0
 800569e:	d010      	beq.n	80056c2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a2:	3324      	adds	r3, #36	; 0x24
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 f817 	bl	80066d8 <xTaskRemoveFromEventList>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d013      	beq.n	80056d8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056b0:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <xQueueGenericSend+0x208>)
 80056b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	e00a      	b.n	80056d8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056c8:	4b39      	ldr	r3, [pc, #228]	; (80057b0 <xQueueGenericSend+0x208>)
 80056ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80056d8:	f001 ff4c 	bl	8007574 <vPortExitCritical>
				return pdPASS;
 80056dc:	2301      	movs	r3, #1
 80056de:	e063      	b.n	80057a8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056e6:	f001 ff45 	bl	8007574 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e05c      	b.n	80057a8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056f4:	f107 0314 	add.w	r3, r7, #20
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 f853 	bl	80067a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056fe:	2301      	movs	r3, #1
 8005700:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005702:	f001 ff37 	bl	8007574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005706:	f000 fdb3 	bl	8006270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800570a:	f001 feff 	bl	800750c <vPortEnterCritical>
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005714:	b25b      	sxtb	r3, r3
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800571a:	d103      	bne.n	8005724 <xQueueGenericSend+0x17c>
 800571c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800572a:	b25b      	sxtb	r3, r3
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005730:	d103      	bne.n	800573a <xQueueGenericSend+0x192>
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800573a:	f001 ff1b 	bl	8007574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800573e:	1d3a      	adds	r2, r7, #4
 8005740:	f107 0314 	add.w	r3, r7, #20
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f001 f842 	bl	80067d0 <xTaskCheckForTimeOut>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d124      	bne.n	800579c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005754:	f000 faac 	bl	8005cb0 <prvIsQueueFull>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d018      	beq.n	8005790 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	3310      	adds	r3, #16
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4611      	mov	r1, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f000 ff62 	bl	8006630 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800576c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800576e:	f000 fa37 	bl	8005be0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005772:	f000 fd8b 	bl	800628c <xTaskResumeAll>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	f47f af7c 	bne.w	8005676 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800577e:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <xQueueGenericSend+0x208>)
 8005780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	e772      	b.n	8005676 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005792:	f000 fa25 	bl	8005be0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005796:	f000 fd79 	bl	800628c <xTaskResumeAll>
 800579a:	e76c      	b.n	8005676 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800579c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800579e:	f000 fa1f 	bl	8005be0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057a2:	f000 fd73 	bl	800628c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3738      	adds	r7, #56	; 0x38
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	e000ed04 	.word	0xe000ed04

080057b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08e      	sub	sp, #56	; 0x38
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10c      	bne.n	80057e6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	b672      	cpsid	i
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	b662      	cpsie	i
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057e2:	bf00      	nop
 80057e4:	e7fe      	b.n	80057e4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d103      	bne.n	80057f4 <xQueueGenericSendFromISR+0x40>
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <xQueueGenericSendFromISR+0x44>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <xQueueGenericSendFromISR+0x46>
 80057f8:	2300      	movs	r3, #0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10c      	bne.n	8005818 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	b672      	cpsid	i
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	b662      	cpsie	i
 8005812:	623b      	str	r3, [r7, #32]
}
 8005814:	bf00      	nop
 8005816:	e7fe      	b.n	8005816 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d103      	bne.n	8005826 <xQueueGenericSendFromISR+0x72>
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <xQueueGenericSendFromISR+0x76>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <xQueueGenericSendFromISR+0x78>
 800582a:	2300      	movs	r3, #0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10c      	bne.n	800584a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	b672      	cpsid	i
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	b662      	cpsie	i
 8005844:	61fb      	str	r3, [r7, #28]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800584a:	f001 ff47 	bl	80076dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800584e:	f3ef 8211 	mrs	r2, BASEPRI
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	b672      	cpsid	i
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	b662      	cpsie	i
 8005866:	61ba      	str	r2, [r7, #24]
 8005868:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800586a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800586c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005876:	429a      	cmp	r2, r3
 8005878:	d302      	bcc.n	8005880 <xQueueGenericSendFromISR+0xcc>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d12c      	bne.n	80058da <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	68b9      	ldr	r1, [r7, #8]
 800588e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005890:	f000 f916 	bl	8005ac0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005894:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800589c:	d112      	bne.n	80058c4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d016      	beq.n	80058d4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	3324      	adds	r3, #36	; 0x24
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 ff14 	bl	80066d8 <xTaskRemoveFromEventList>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00e      	beq.n	80058d4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00b      	beq.n	80058d4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	e007      	b.n	80058d4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058c8:	3301      	adds	r3, #1
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	b25a      	sxtb	r2, r3
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058d4:	2301      	movs	r3, #1
 80058d6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80058d8:	e001      	b.n	80058de <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	637b      	str	r3, [r7, #52]	; 0x34
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3738      	adds	r7, #56	; 0x38
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08c      	sub	sp, #48	; 0x30
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005900:	2300      	movs	r3, #0
 8005902:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10c      	bne.n	8005928 <xQueueReceive+0x34>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	b672      	cpsid	i
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	b662      	cpsie	i
 8005922:	623b      	str	r3, [r7, #32]
}
 8005924:	bf00      	nop
 8005926:	e7fe      	b.n	8005926 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d103      	bne.n	8005936 <xQueueReceive+0x42>
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <xQueueReceive+0x46>
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <xQueueReceive+0x48>
 800593a:	2300      	movs	r3, #0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10c      	bne.n	800595a <xQueueReceive+0x66>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	b672      	cpsid	i
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	b662      	cpsie	i
 8005954:	61fb      	str	r3, [r7, #28]
}
 8005956:	bf00      	nop
 8005958:	e7fe      	b.n	8005958 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800595a:	f001 f887 	bl	8006a6c <xTaskGetSchedulerState>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <xQueueReceive+0x76>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <xQueueReceive+0x7a>
 800596a:	2301      	movs	r3, #1
 800596c:	e000      	b.n	8005970 <xQueueReceive+0x7c>
 800596e:	2300      	movs	r3, #0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10c      	bne.n	800598e <xQueueReceive+0x9a>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	b672      	cpsid	i
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	b662      	cpsie	i
 8005988:	61bb      	str	r3, [r7, #24]
}
 800598a:	bf00      	nop
 800598c:	e7fe      	b.n	800598c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800598e:	f001 fdbd 	bl	800750c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01f      	beq.n	80059de <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059a2:	f000 f8f7 	bl	8005b94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	1e5a      	subs	r2, r3, #1
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00f      	beq.n	80059d6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	3310      	adds	r3, #16
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fe8c 	bl	80066d8 <xTaskRemoveFromEventList>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059c6:	4b3d      	ldr	r3, [pc, #244]	; (8005abc <xQueueReceive+0x1c8>)
 80059c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059d6:	f001 fdcd 	bl	8007574 <vPortExitCritical>
				return pdPASS;
 80059da:	2301      	movs	r3, #1
 80059dc:	e069      	b.n	8005ab2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059e4:	f001 fdc6 	bl	8007574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059e8:	2300      	movs	r3, #0
 80059ea:	e062      	b.n	8005ab2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059f2:	f107 0310 	add.w	r3, r7, #16
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fed4 	bl	80067a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059fc:	2301      	movs	r3, #1
 80059fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a00:	f001 fdb8 	bl	8007574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a04:	f000 fc34 	bl	8006270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a08:	f001 fd80 	bl	800750c <vPortEnterCritical>
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a12:	b25b      	sxtb	r3, r3
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a18:	d103      	bne.n	8005a22 <xQueueReceive+0x12e>
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a28:	b25b      	sxtb	r3, r3
 8005a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a2e:	d103      	bne.n	8005a38 <xQueueReceive+0x144>
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a38:	f001 fd9c 	bl	8007574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a3c:	1d3a      	adds	r2, r7, #4
 8005a3e:	f107 0310 	add.w	r3, r7, #16
 8005a42:	4611      	mov	r1, r2
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fec3 	bl	80067d0 <xTaskCheckForTimeOut>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d123      	bne.n	8005a98 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a52:	f000 f917 	bl	8005c84 <prvIsQueueEmpty>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d017      	beq.n	8005a8c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	3324      	adds	r3, #36	; 0x24
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	4611      	mov	r1, r2
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 fde3 	bl	8006630 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a6c:	f000 f8b8 	bl	8005be0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a70:	f000 fc0c 	bl	800628c <xTaskResumeAll>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d189      	bne.n	800598e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005a7a:	4b10      	ldr	r3, [pc, #64]	; (8005abc <xQueueReceive+0x1c8>)
 8005a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	e780      	b.n	800598e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a8e:	f000 f8a7 	bl	8005be0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a92:	f000 fbfb 	bl	800628c <xTaskResumeAll>
 8005a96:	e77a      	b.n	800598e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a9a:	f000 f8a1 	bl	8005be0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a9e:	f000 fbf5 	bl	800628c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aa4:	f000 f8ee 	bl	8005c84 <prvIsQueueEmpty>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f43f af6f 	beq.w	800598e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ab0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3730      	adds	r7, #48	; 0x30
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	e000ed04 	.word	0xe000ed04

08005ac0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10d      	bne.n	8005afa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d14d      	bne.n	8005b82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 ffdc 	bl	8006aa8 <xTaskPriorityDisinherit>
 8005af0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	609a      	str	r2, [r3, #8]
 8005af8:	e043      	b.n	8005b82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d119      	bne.n	8005b34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6858      	ldr	r0, [r3, #4]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	461a      	mov	r2, r3
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	f002 f892 	bl	8007c34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	441a      	add	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d32b      	bcc.n	8005b82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	605a      	str	r2, [r3, #4]
 8005b32:	e026      	b.n	8005b82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	68d8      	ldr	r0, [r3, #12]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	68b9      	ldr	r1, [r7, #8]
 8005b40:	f002 f878 	bl	8007c34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	425b      	negs	r3, r3
 8005b4e:	441a      	add	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d207      	bcs.n	8005b70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	425b      	negs	r3, r3
 8005b6a:	441a      	add	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d105      	bne.n	8005b82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b8a:	697b      	ldr	r3, [r7, #20]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d018      	beq.n	8005bd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	441a      	add	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d303      	bcc.n	8005bc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68d9      	ldr	r1, [r3, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6838      	ldr	r0, [r7, #0]
 8005bd4:	f002 f82e 	bl	8007c34 <memcpy>
	}
}
 8005bd8:	bf00      	nop
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005be8:	f001 fc90 	bl	800750c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bf2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bf4:	e011      	b.n	8005c1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d012      	beq.n	8005c24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3324      	adds	r3, #36	; 0x24
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 fd68 	bl	80066d8 <xTaskRemoveFromEventList>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c0e:	f000 fe45 	bl	800689c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	dce9      	bgt.n	8005bf6 <prvUnlockQueue+0x16>
 8005c22:	e000      	b.n	8005c26 <prvUnlockQueue+0x46>
					break;
 8005c24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	22ff      	movs	r2, #255	; 0xff
 8005c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c2e:	f001 fca1 	bl	8007574 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c32:	f001 fc6b 	bl	800750c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c3e:	e011      	b.n	8005c64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d012      	beq.n	8005c6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3310      	adds	r3, #16
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fd43 	bl	80066d8 <xTaskRemoveFromEventList>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c58:	f000 fe20 	bl	800689c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c5c:	7bbb      	ldrb	r3, [r7, #14]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	dce9      	bgt.n	8005c40 <prvUnlockQueue+0x60>
 8005c6c:	e000      	b.n	8005c70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	22ff      	movs	r2, #255	; 0xff
 8005c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c78:	f001 fc7c 	bl	8007574 <vPortExitCritical>
}
 8005c7c:	bf00      	nop
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c8c:	f001 fc3e 	bl	800750c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	e001      	b.n	8005ca2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ca2:	f001 fc67 	bl	8007574 <vPortExitCritical>

	return xReturn;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cb8:	f001 fc28 	bl	800750c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d102      	bne.n	8005cce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	e001      	b.n	8005cd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cd2:	f001 fc4f 	bl	8007574 <vPortExitCritical>

	return xReturn;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	e014      	b.n	8005d1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005cf0:	4a0f      	ldr	r2, [pc, #60]	; (8005d30 <vQueueAddToRegistry+0x50>)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10b      	bne.n	8005d14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005cfc:	490c      	ldr	r1, [pc, #48]	; (8005d30 <vQueueAddToRegistry+0x50>)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d06:	4a0a      	ldr	r2, [pc, #40]	; (8005d30 <vQueueAddToRegistry+0x50>)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d12:	e006      	b.n	8005d22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3301      	adds	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b07      	cmp	r3, #7
 8005d1e:	d9e7      	bls.n	8005cf0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	20000e68 	.word	0x20000e68

08005d34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d44:	f001 fbe2 	bl	800750c <vPortEnterCritical>
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d4e:	b25b      	sxtb	r3, r3
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d54:	d103      	bne.n	8005d5e <vQueueWaitForMessageRestricted+0x2a>
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d64:	b25b      	sxtb	r3, r3
 8005d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d6a:	d103      	bne.n	8005d74 <vQueueWaitForMessageRestricted+0x40>
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d74:	f001 fbfe 	bl	8007574 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d106      	bne.n	8005d8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	3324      	adds	r3, #36	; 0x24
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	68b9      	ldr	r1, [r7, #8]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fc77 	bl	800667c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d8e:	6978      	ldr	r0, [r7, #20]
 8005d90:	f7ff ff26 	bl	8005be0 <prvUnlockQueue>
	}
 8005d94:	bf00      	nop
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08e      	sub	sp, #56	; 0x38
 8005da0:	af04      	add	r7, sp, #16
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10c      	bne.n	8005dca <xTaskCreateStatic+0x2e>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	b672      	cpsid	i
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	b662      	cpsie	i
 8005dc4:	623b      	str	r3, [r7, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	e7fe      	b.n	8005dc8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10c      	bne.n	8005dea <xTaskCreateStatic+0x4e>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	b672      	cpsid	i
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	b662      	cpsie	i
 8005de4:	61fb      	str	r3, [r7, #28]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dea:	23a8      	movs	r3, #168	; 0xa8
 8005dec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	2ba8      	cmp	r3, #168	; 0xa8
 8005df2:	d00c      	beq.n	8005e0e <xTaskCreateStatic+0x72>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	b672      	cpsid	i
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	b662      	cpsie	i
 8005e08:	61bb      	str	r3, [r7, #24]
}
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01e      	beq.n	8005e54 <xTaskCreateStatic+0xb8>
 8005e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01b      	beq.n	8005e54 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e2e:	2300      	movs	r3, #0
 8005e30:	9303      	str	r3, [sp, #12]
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	9302      	str	r3, [sp, #8]
 8005e36:	f107 0314 	add.w	r3, r7, #20
 8005e3a:	9301      	str	r3, [sp, #4]
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f850 	bl	8005eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e4e:	f000 f8f5 	bl	800603c <prvAddNewTaskToReadyList>
 8005e52:	e001      	b.n	8005e58 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e58:	697b      	ldr	r3, [r7, #20]
	}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3728      	adds	r7, #40	; 0x28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b08c      	sub	sp, #48	; 0x30
 8005e66:	af04      	add	r7, sp, #16
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	603b      	str	r3, [r7, #0]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e72:	88fb      	ldrh	r3, [r7, #6]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4618      	mov	r0, r3
 8005e78:	f001 fc74 	bl	8007764 <pvPortMalloc>
 8005e7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00e      	beq.n	8005ea2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e84:	20a8      	movs	r0, #168	; 0xa8
 8005e86:	f001 fc6d 	bl	8007764 <pvPortMalloc>
 8005e8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
 8005e98:	e005      	b.n	8005ea6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e9a:	6978      	ldr	r0, [r7, #20]
 8005e9c:	f001 fd2c 	bl	80078f8 <vPortFree>
 8005ea0:	e001      	b.n	8005ea6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d017      	beq.n	8005edc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005eb4:	88fa      	ldrh	r2, [r7, #6]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	9303      	str	r3, [sp, #12]
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	9302      	str	r3, [sp, #8]
 8005ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 f80e 	bl	8005eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ed0:	69f8      	ldr	r0, [r7, #28]
 8005ed2:	f000 f8b3 	bl	800603c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	e002      	b.n	8005ee2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ee0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3720      	adds	r7, #32
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	461a      	mov	r2, r3
 8005f04:	21a5      	movs	r1, #165	; 0xa5
 8005f06:	f001 fe11 	bl	8007b2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005f14:	440b      	add	r3, r1
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	f023 0307 	bic.w	r3, r3, #7
 8005f22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00c      	beq.n	8005f48 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	b672      	cpsid	i
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	b662      	cpsie	i
 8005f42:	617b      	str	r3, [r7, #20]
}
 8005f44:	bf00      	nop
 8005f46:	e7fe      	b.n	8005f46 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d01f      	beq.n	8005f8e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
 8005f52:	e012      	b.n	8005f7a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	7819      	ldrb	r1, [r3, #0]
 8005f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	3334      	adds	r3, #52	; 0x34
 8005f64:	460a      	mov	r2, r1
 8005f66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d006      	beq.n	8005f82 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	3301      	adds	r3, #1
 8005f78:	61fb      	str	r3, [r7, #28]
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2b0f      	cmp	r3, #15
 8005f7e:	d9e9      	bls.n	8005f54 <prvInitialiseNewTask+0x68>
 8005f80:	e000      	b.n	8005f84 <prvInitialiseNewTask+0x98>
			{
				break;
 8005f82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f8c:	e003      	b.n	8005f96 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f98:	2b37      	cmp	r3, #55	; 0x37
 8005f9a:	d901      	bls.n	8005fa0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f9c:	2337      	movs	r3, #55	; 0x37
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fa4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005faa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	2200      	movs	r2, #0
 8005fb0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7ff f952 	bl	8005260 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	3318      	adds	r3, #24
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff f94d 	bl	8005260 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	3354      	adds	r3, #84	; 0x54
 8005ff0:	224c      	movs	r2, #76	; 0x4c
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 fd99 	bl	8007b2c <memset>
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	4a0c      	ldr	r2, [pc, #48]	; (8006030 <prvInitialiseNewTask+0x144>)
 8005ffe:	659a      	str	r2, [r3, #88]	; 0x58
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	4a0c      	ldr	r2, [pc, #48]	; (8006034 <prvInitialiseNewTask+0x148>)
 8006004:	65da      	str	r2, [r3, #92]	; 0x5c
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	4a0b      	ldr	r2, [pc, #44]	; (8006038 <prvInitialiseNewTask+0x14c>)
 800600a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	68f9      	ldr	r1, [r7, #12]
 8006010:	69b8      	ldr	r0, [r7, #24]
 8006012:	f001 f96b 	bl	80072ec <pxPortInitialiseStack>
 8006016:	4602      	mov	r2, r0
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006026:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006028:	bf00      	nop
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	200050f4 	.word	0x200050f4
 8006034:	2000515c 	.word	0x2000515c
 8006038:	200051c4 	.word	0x200051c4

0800603c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006044:	f001 fa62 	bl	800750c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006048:	4b2d      	ldr	r3, [pc, #180]	; (8006100 <prvAddNewTaskToReadyList+0xc4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3301      	adds	r3, #1
 800604e:	4a2c      	ldr	r2, [pc, #176]	; (8006100 <prvAddNewTaskToReadyList+0xc4>)
 8006050:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006052:	4b2c      	ldr	r3, [pc, #176]	; (8006104 <prvAddNewTaskToReadyList+0xc8>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800605a:	4a2a      	ldr	r2, [pc, #168]	; (8006104 <prvAddNewTaskToReadyList+0xc8>)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006060:	4b27      	ldr	r3, [pc, #156]	; (8006100 <prvAddNewTaskToReadyList+0xc4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d110      	bne.n	800608a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006068:	f000 fc3c 	bl	80068e4 <prvInitialiseTaskLists>
 800606c:	e00d      	b.n	800608a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800606e:	4b26      	ldr	r3, [pc, #152]	; (8006108 <prvAddNewTaskToReadyList+0xcc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d109      	bne.n	800608a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006076:	4b23      	ldr	r3, [pc, #140]	; (8006104 <prvAddNewTaskToReadyList+0xc8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	429a      	cmp	r2, r3
 8006082:	d802      	bhi.n	800608a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006084:	4a1f      	ldr	r2, [pc, #124]	; (8006104 <prvAddNewTaskToReadyList+0xc8>)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800608a:	4b20      	ldr	r3, [pc, #128]	; (800610c <prvAddNewTaskToReadyList+0xd0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3301      	adds	r3, #1
 8006090:	4a1e      	ldr	r2, [pc, #120]	; (800610c <prvAddNewTaskToReadyList+0xd0>)
 8006092:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006094:	4b1d      	ldr	r3, [pc, #116]	; (800610c <prvAddNewTaskToReadyList+0xd0>)
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a0:	4b1b      	ldr	r3, [pc, #108]	; (8006110 <prvAddNewTaskToReadyList+0xd4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d903      	bls.n	80060b0 <prvAddNewTaskToReadyList+0x74>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	4a18      	ldr	r2, [pc, #96]	; (8006110 <prvAddNewTaskToReadyList+0xd4>)
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4a15      	ldr	r2, [pc, #84]	; (8006114 <prvAddNewTaskToReadyList+0xd8>)
 80060be:	441a      	add	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f7ff f8d7 	bl	800527a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060cc:	f001 fa52 	bl	8007574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060d0:	4b0d      	ldr	r3, [pc, #52]	; (8006108 <prvAddNewTaskToReadyList+0xcc>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00e      	beq.n	80060f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <prvAddNewTaskToReadyList+0xc8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d207      	bcs.n	80060f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060e6:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <prvAddNewTaskToReadyList+0xdc>)
 80060e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	2000137c 	.word	0x2000137c
 8006104:	20000ea8 	.word	0x20000ea8
 8006108:	20001388 	.word	0x20001388
 800610c:	20001398 	.word	0x20001398
 8006110:	20001384 	.word	0x20001384
 8006114:	20000eac 	.word	0x20000eac
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d019      	beq.n	8006162 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800612e:	4b14      	ldr	r3, [pc, #80]	; (8006180 <vTaskDelay+0x64>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00c      	beq.n	8006150 <vTaskDelay+0x34>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613a:	b672      	cpsid	i
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	b662      	cpsie	i
 800614a:	60bb      	str	r3, [r7, #8]
}
 800614c:	bf00      	nop
 800614e:	e7fe      	b.n	800614e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006150:	f000 f88e 	bl	8006270 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006154:	2100      	movs	r1, #0
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fd18 	bl	8006b8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800615c:	f000 f896 	bl	800628c <xTaskResumeAll>
 8006160:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d107      	bne.n	8006178 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006168:	4b06      	ldr	r3, [pc, #24]	; (8006184 <vTaskDelay+0x68>)
 800616a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	200013a4 	.word	0x200013a4
 8006184:	e000ed04 	.word	0xe000ed04

08006188 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08a      	sub	sp, #40	; 0x28
 800618c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006192:	2300      	movs	r3, #0
 8006194:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006196:	463a      	mov	r2, r7
 8006198:	1d39      	adds	r1, r7, #4
 800619a:	f107 0308 	add.w	r3, r7, #8
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff f80a 	bl	80051b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	9202      	str	r2, [sp, #8]
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	2300      	movs	r3, #0
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	2300      	movs	r3, #0
 80061b4:	460a      	mov	r2, r1
 80061b6:	4926      	ldr	r1, [pc, #152]	; (8006250 <vTaskStartScheduler+0xc8>)
 80061b8:	4826      	ldr	r0, [pc, #152]	; (8006254 <vTaskStartScheduler+0xcc>)
 80061ba:	f7ff fdef 	bl	8005d9c <xTaskCreateStatic>
 80061be:	4603      	mov	r3, r0
 80061c0:	4a25      	ldr	r2, [pc, #148]	; (8006258 <vTaskStartScheduler+0xd0>)
 80061c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061c4:	4b24      	ldr	r3, [pc, #144]	; (8006258 <vTaskStartScheduler+0xd0>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061cc:	2301      	movs	r3, #1
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	e001      	b.n	80061d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d102      	bne.n	80061e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80061dc:	f000 fd2a 	bl	8006c34 <xTimerCreateTimerTask>
 80061e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d11d      	bne.n	8006224 <vTaskStartScheduler+0x9c>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	b672      	cpsid	i
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	b662      	cpsie	i
 80061fc:	613b      	str	r3, [r7, #16]
}
 80061fe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006200:	4b16      	ldr	r3, [pc, #88]	; (800625c <vTaskStartScheduler+0xd4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3354      	adds	r3, #84	; 0x54
 8006206:	4a16      	ldr	r2, [pc, #88]	; (8006260 <vTaskStartScheduler+0xd8>)
 8006208:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800620a:	4b16      	ldr	r3, [pc, #88]	; (8006264 <vTaskStartScheduler+0xdc>)
 800620c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006210:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006212:	4b15      	ldr	r3, [pc, #84]	; (8006268 <vTaskStartScheduler+0xe0>)
 8006214:	2201      	movs	r2, #1
 8006216:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006218:	4b14      	ldr	r3, [pc, #80]	; (800626c <vTaskStartScheduler+0xe4>)
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800621e:	f001 f8f7 	bl	8007410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006222:	e010      	b.n	8006246 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800622a:	d10c      	bne.n	8006246 <vTaskStartScheduler+0xbe>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	b672      	cpsid	i
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	b662      	cpsie	i
 8006240:	60fb      	str	r3, [r7, #12]
}
 8006242:	bf00      	nop
 8006244:	e7fe      	b.n	8006244 <vTaskStartScheduler+0xbc>
}
 8006246:	bf00      	nop
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	08007d24 	.word	0x08007d24
 8006254:	080068b5 	.word	0x080068b5
 8006258:	200013a0 	.word	0x200013a0
 800625c:	20000ea8 	.word	0x20000ea8
 8006260:	2000005c 	.word	0x2000005c
 8006264:	2000139c 	.word	0x2000139c
 8006268:	20001388 	.word	0x20001388
 800626c:	20001380 	.word	0x20001380

08006270 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006274:	4b04      	ldr	r3, [pc, #16]	; (8006288 <vTaskSuspendAll+0x18>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3301      	adds	r3, #1
 800627a:	4a03      	ldr	r2, [pc, #12]	; (8006288 <vTaskSuspendAll+0x18>)
 800627c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800627e:	bf00      	nop
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	200013a4 	.word	0x200013a4

0800628c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006296:	2300      	movs	r3, #0
 8006298:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800629a:	4b43      	ldr	r3, [pc, #268]	; (80063a8 <xTaskResumeAll+0x11c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10c      	bne.n	80062bc <xTaskResumeAll+0x30>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	b672      	cpsid	i
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	b662      	cpsie	i
 80062b6:	603b      	str	r3, [r7, #0]
}
 80062b8:	bf00      	nop
 80062ba:	e7fe      	b.n	80062ba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062bc:	f001 f926 	bl	800750c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062c0:	4b39      	ldr	r3, [pc, #228]	; (80063a8 <xTaskResumeAll+0x11c>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	4a38      	ldr	r2, [pc, #224]	; (80063a8 <xTaskResumeAll+0x11c>)
 80062c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ca:	4b37      	ldr	r3, [pc, #220]	; (80063a8 <xTaskResumeAll+0x11c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d162      	bne.n	8006398 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062d2:	4b36      	ldr	r3, [pc, #216]	; (80063ac <xTaskResumeAll+0x120>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d05e      	beq.n	8006398 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062da:	e02f      	b.n	800633c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062dc:	4b34      	ldr	r3, [pc, #208]	; (80063b0 <xTaskResumeAll+0x124>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3318      	adds	r3, #24
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff f823 	bl	8005334 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3304      	adds	r3, #4
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff f81e 	bl	8005334 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fc:	4b2d      	ldr	r3, [pc, #180]	; (80063b4 <xTaskResumeAll+0x128>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d903      	bls.n	800630c <xTaskResumeAll+0x80>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	4a2a      	ldr	r2, [pc, #168]	; (80063b4 <xTaskResumeAll+0x128>)
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4a27      	ldr	r2, [pc, #156]	; (80063b8 <xTaskResumeAll+0x12c>)
 800631a:	441a      	add	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3304      	adds	r3, #4
 8006320:	4619      	mov	r1, r3
 8006322:	4610      	mov	r0, r2
 8006324:	f7fe ffa9 	bl	800527a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632c:	4b23      	ldr	r3, [pc, #140]	; (80063bc <xTaskResumeAll+0x130>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	429a      	cmp	r2, r3
 8006334:	d302      	bcc.n	800633c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006336:	4b22      	ldr	r3, [pc, #136]	; (80063c0 <xTaskResumeAll+0x134>)
 8006338:	2201      	movs	r2, #1
 800633a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800633c:	4b1c      	ldr	r3, [pc, #112]	; (80063b0 <xTaskResumeAll+0x124>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1cb      	bne.n	80062dc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800634a:	f000 fb6f 	bl	8006a2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800634e:	4b1d      	ldr	r3, [pc, #116]	; (80063c4 <xTaskResumeAll+0x138>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d010      	beq.n	800637c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800635a:	f000 f847 	bl	80063ec <xTaskIncrementTick>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006364:	4b16      	ldr	r3, [pc, #88]	; (80063c0 <xTaskResumeAll+0x134>)
 8006366:	2201      	movs	r2, #1
 8006368:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3b01      	subs	r3, #1
 800636e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1f1      	bne.n	800635a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006376:	4b13      	ldr	r3, [pc, #76]	; (80063c4 <xTaskResumeAll+0x138>)
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800637c:	4b10      	ldr	r3, [pc, #64]	; (80063c0 <xTaskResumeAll+0x134>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d009      	beq.n	8006398 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006384:	2301      	movs	r3, #1
 8006386:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006388:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <xTaskResumeAll+0x13c>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006398:	f001 f8ec 	bl	8007574 <vPortExitCritical>

	return xAlreadyYielded;
 800639c:	68bb      	ldr	r3, [r7, #8]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	200013a4 	.word	0x200013a4
 80063ac:	2000137c 	.word	0x2000137c
 80063b0:	2000133c 	.word	0x2000133c
 80063b4:	20001384 	.word	0x20001384
 80063b8:	20000eac 	.word	0x20000eac
 80063bc:	20000ea8 	.word	0x20000ea8
 80063c0:	20001390 	.word	0x20001390
 80063c4:	2000138c 	.word	0x2000138c
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80063d2:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <xTaskGetTickCount+0x1c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80063d8:	687b      	ldr	r3, [r7, #4]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	20001380 	.word	0x20001380

080063ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063f2:	2300      	movs	r3, #0
 80063f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063f6:	4b50      	ldr	r3, [pc, #320]	; (8006538 <xTaskIncrementTick+0x14c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f040 808b 	bne.w	8006516 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006400:	4b4e      	ldr	r3, [pc, #312]	; (800653c <xTaskIncrementTick+0x150>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006408:	4a4c      	ldr	r2, [pc, #304]	; (800653c <xTaskIncrementTick+0x150>)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d122      	bne.n	800645a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006414:	4b4a      	ldr	r3, [pc, #296]	; (8006540 <xTaskIncrementTick+0x154>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00c      	beq.n	8006438 <xTaskIncrementTick+0x4c>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	b672      	cpsid	i
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	b662      	cpsie	i
 8006432:	603b      	str	r3, [r7, #0]
}
 8006434:	bf00      	nop
 8006436:	e7fe      	b.n	8006436 <xTaskIncrementTick+0x4a>
 8006438:	4b41      	ldr	r3, [pc, #260]	; (8006540 <xTaskIncrementTick+0x154>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	4b41      	ldr	r3, [pc, #260]	; (8006544 <xTaskIncrementTick+0x158>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a3f      	ldr	r2, [pc, #252]	; (8006540 <xTaskIncrementTick+0x154>)
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	4a3f      	ldr	r2, [pc, #252]	; (8006544 <xTaskIncrementTick+0x158>)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	4b3e      	ldr	r3, [pc, #248]	; (8006548 <xTaskIncrementTick+0x15c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3301      	adds	r3, #1
 8006452:	4a3d      	ldr	r2, [pc, #244]	; (8006548 <xTaskIncrementTick+0x15c>)
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	f000 fae9 	bl	8006a2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800645a:	4b3c      	ldr	r3, [pc, #240]	; (800654c <xTaskIncrementTick+0x160>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	429a      	cmp	r2, r3
 8006462:	d349      	bcc.n	80064f8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006464:	4b36      	ldr	r3, [pc, #216]	; (8006540 <xTaskIncrementTick+0x154>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d104      	bne.n	8006478 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800646e:	4b37      	ldr	r3, [pc, #220]	; (800654c <xTaskIncrementTick+0x160>)
 8006470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006474:	601a      	str	r2, [r3, #0]
					break;
 8006476:	e03f      	b.n	80064f8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006478:	4b31      	ldr	r3, [pc, #196]	; (8006540 <xTaskIncrementTick+0x154>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	429a      	cmp	r2, r3
 800648e:	d203      	bcs.n	8006498 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006490:	4a2e      	ldr	r2, [pc, #184]	; (800654c <xTaskIncrementTick+0x160>)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006496:	e02f      	b.n	80064f8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	3304      	adds	r3, #4
 800649c:	4618      	mov	r0, r3
 800649e:	f7fe ff49 	bl	8005334 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d004      	beq.n	80064b4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	3318      	adds	r3, #24
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fe ff40 	bl	8005334 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b8:	4b25      	ldr	r3, [pc, #148]	; (8006550 <xTaskIncrementTick+0x164>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d903      	bls.n	80064c8 <xTaskIncrementTick+0xdc>
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	4a22      	ldr	r2, [pc, #136]	; (8006550 <xTaskIncrementTick+0x164>)
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4a1f      	ldr	r2, [pc, #124]	; (8006554 <xTaskIncrementTick+0x168>)
 80064d6:	441a      	add	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	3304      	adds	r3, #4
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f7fe fecb 	bl	800527a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e8:	4b1b      	ldr	r3, [pc, #108]	; (8006558 <xTaskIncrementTick+0x16c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d3b8      	bcc.n	8006464 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80064f2:	2301      	movs	r3, #1
 80064f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064f6:	e7b5      	b.n	8006464 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064f8:	4b17      	ldr	r3, [pc, #92]	; (8006558 <xTaskIncrementTick+0x16c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fe:	4915      	ldr	r1, [pc, #84]	; (8006554 <xTaskIncrementTick+0x168>)
 8006500:	4613      	mov	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	440b      	add	r3, r1
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d907      	bls.n	8006520 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006510:	2301      	movs	r3, #1
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	e004      	b.n	8006520 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006516:	4b11      	ldr	r3, [pc, #68]	; (800655c <xTaskIncrementTick+0x170>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3301      	adds	r3, #1
 800651c:	4a0f      	ldr	r2, [pc, #60]	; (800655c <xTaskIncrementTick+0x170>)
 800651e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006520:	4b0f      	ldr	r3, [pc, #60]	; (8006560 <xTaskIncrementTick+0x174>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800652c:	697b      	ldr	r3, [r7, #20]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	200013a4 	.word	0x200013a4
 800653c:	20001380 	.word	0x20001380
 8006540:	20001334 	.word	0x20001334
 8006544:	20001338 	.word	0x20001338
 8006548:	20001394 	.word	0x20001394
 800654c:	2000139c 	.word	0x2000139c
 8006550:	20001384 	.word	0x20001384
 8006554:	20000eac 	.word	0x20000eac
 8006558:	20000ea8 	.word	0x20000ea8
 800655c:	2000138c 	.word	0x2000138c
 8006560:	20001390 	.word	0x20001390

08006564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800656a:	4b2b      	ldr	r3, [pc, #172]	; (8006618 <vTaskSwitchContext+0xb4>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006572:	4b2a      	ldr	r3, [pc, #168]	; (800661c <vTaskSwitchContext+0xb8>)
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006578:	e048      	b.n	800660c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800657a:	4b28      	ldr	r3, [pc, #160]	; (800661c <vTaskSwitchContext+0xb8>)
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006580:	4b27      	ldr	r3, [pc, #156]	; (8006620 <vTaskSwitchContext+0xbc>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	e012      	b.n	80065ae <vTaskSwitchContext+0x4a>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10c      	bne.n	80065a8 <vTaskSwitchContext+0x44>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	b672      	cpsid	i
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	b662      	cpsie	i
 80065a2:	607b      	str	r3, [r7, #4]
}
 80065a4:	bf00      	nop
 80065a6:	e7fe      	b.n	80065a6 <vTaskSwitchContext+0x42>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	491d      	ldr	r1, [pc, #116]	; (8006624 <vTaskSwitchContext+0xc0>)
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0e2      	beq.n	8006588 <vTaskSwitchContext+0x24>
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4613      	mov	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4a15      	ldr	r2, [pc, #84]	; (8006624 <vTaskSwitchContext+0xc0>)
 80065ce:	4413      	add	r3, r2
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	605a      	str	r2, [r3, #4]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	3308      	adds	r3, #8
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d104      	bne.n	80065f2 <vTaskSwitchContext+0x8e>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	605a      	str	r2, [r3, #4]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	4a0b      	ldr	r2, [pc, #44]	; (8006628 <vTaskSwitchContext+0xc4>)
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	4a08      	ldr	r2, [pc, #32]	; (8006620 <vTaskSwitchContext+0xbc>)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006602:	4b09      	ldr	r3, [pc, #36]	; (8006628 <vTaskSwitchContext+0xc4>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3354      	adds	r3, #84	; 0x54
 8006608:	4a08      	ldr	r2, [pc, #32]	; (800662c <vTaskSwitchContext+0xc8>)
 800660a:	6013      	str	r3, [r2, #0]
}
 800660c:	bf00      	nop
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	200013a4 	.word	0x200013a4
 800661c:	20001390 	.word	0x20001390
 8006620:	20001384 	.word	0x20001384
 8006624:	20000eac 	.word	0x20000eac
 8006628:	20000ea8 	.word	0x20000ea8
 800662c:	2000005c 	.word	0x2000005c

08006630 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10c      	bne.n	800665a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	b672      	cpsid	i
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	b662      	cpsie	i
 8006654:	60fb      	str	r3, [r7, #12]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800665a:	4b07      	ldr	r3, [pc, #28]	; (8006678 <vTaskPlaceOnEventList+0x48>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3318      	adds	r3, #24
 8006660:	4619      	mov	r1, r3
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7fe fe2d 	bl	80052c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006668:	2101      	movs	r1, #1
 800666a:	6838      	ldr	r0, [r7, #0]
 800666c:	f000 fa8e 	bl	8006b8c <prvAddCurrentTaskToDelayedList>
}
 8006670:	bf00      	nop
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	20000ea8 	.word	0x20000ea8

0800667c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10c      	bne.n	80066a8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006692:	b672      	cpsid	i
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	b662      	cpsie	i
 80066a2:	617b      	str	r3, [r7, #20]
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066a8:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <vTaskPlaceOnEventListRestricted+0x58>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3318      	adds	r3, #24
 80066ae:	4619      	mov	r1, r3
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f7fe fde2 	bl	800527a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80066bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	68b8      	ldr	r0, [r7, #8]
 80066c6:	f000 fa61 	bl	8006b8c <prvAddCurrentTaskToDelayedList>
	}
 80066ca:	bf00      	nop
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000ea8 	.word	0x20000ea8

080066d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10c      	bne.n	8006708 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	b672      	cpsid	i
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	b662      	cpsie	i
 8006702:	60fb      	str	r3, [r7, #12]
}
 8006704:	bf00      	nop
 8006706:	e7fe      	b.n	8006706 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	3318      	adds	r3, #24
 800670c:	4618      	mov	r0, r3
 800670e:	f7fe fe11 	bl	8005334 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006712:	4b1e      	ldr	r3, [pc, #120]	; (800678c <xTaskRemoveFromEventList+0xb4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d11d      	bne.n	8006756 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	3304      	adds	r3, #4
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe fe08 	bl	8005334 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006728:	4b19      	ldr	r3, [pc, #100]	; (8006790 <xTaskRemoveFromEventList+0xb8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d903      	bls.n	8006738 <xTaskRemoveFromEventList+0x60>
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	4a16      	ldr	r2, [pc, #88]	; (8006790 <xTaskRemoveFromEventList+0xb8>)
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4a13      	ldr	r2, [pc, #76]	; (8006794 <xTaskRemoveFromEventList+0xbc>)
 8006746:	441a      	add	r2, r3
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	3304      	adds	r3, #4
 800674c:	4619      	mov	r1, r3
 800674e:	4610      	mov	r0, r2
 8006750:	f7fe fd93 	bl	800527a <vListInsertEnd>
 8006754:	e005      	b.n	8006762 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	3318      	adds	r3, #24
 800675a:	4619      	mov	r1, r3
 800675c:	480e      	ldr	r0, [pc, #56]	; (8006798 <xTaskRemoveFromEventList+0xc0>)
 800675e:	f7fe fd8c 	bl	800527a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006766:	4b0d      	ldr	r3, [pc, #52]	; (800679c <xTaskRemoveFromEventList+0xc4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	429a      	cmp	r2, r3
 800676e:	d905      	bls.n	800677c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006770:	2301      	movs	r3, #1
 8006772:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006774:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <xTaskRemoveFromEventList+0xc8>)
 8006776:	2201      	movs	r2, #1
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	e001      	b.n	8006780 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006780:	697b      	ldr	r3, [r7, #20]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	200013a4 	.word	0x200013a4
 8006790:	20001384 	.word	0x20001384
 8006794:	20000eac 	.word	0x20000eac
 8006798:	2000133c 	.word	0x2000133c
 800679c:	20000ea8 	.word	0x20000ea8
 80067a0:	20001390 	.word	0x20001390

080067a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067ac:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <vTaskInternalSetTimeOutState+0x24>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067b4:	4b05      	ldr	r3, [pc, #20]	; (80067cc <vTaskInternalSetTimeOutState+0x28>)
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	605a      	str	r2, [r3, #4]
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	20001394 	.word	0x20001394
 80067cc:	20001380 	.word	0x20001380

080067d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10c      	bne.n	80067fa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	b672      	cpsid	i
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	b662      	cpsie	i
 80067f4:	613b      	str	r3, [r7, #16]
}
 80067f6:	bf00      	nop
 80067f8:	e7fe      	b.n	80067f8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10c      	bne.n	800681a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	b672      	cpsid	i
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	b662      	cpsie	i
 8006814:	60fb      	str	r3, [r7, #12]
}
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800681a:	f000 fe77 	bl	800750c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800681e:	4b1d      	ldr	r3, [pc, #116]	; (8006894 <xTaskCheckForTimeOut+0xc4>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006836:	d102      	bne.n	800683e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006838:	2300      	movs	r3, #0
 800683a:	61fb      	str	r3, [r7, #28]
 800683c:	e023      	b.n	8006886 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	4b15      	ldr	r3, [pc, #84]	; (8006898 <xTaskCheckForTimeOut+0xc8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d007      	beq.n	800685a <xTaskCheckForTimeOut+0x8a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	429a      	cmp	r2, r3
 8006852:	d302      	bcc.n	800685a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006854:	2301      	movs	r3, #1
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	e015      	b.n	8006886 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	429a      	cmp	r2, r3
 8006862:	d20b      	bcs.n	800687c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	1ad2      	subs	r2, r2, r3
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff ff97 	bl	80067a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006876:	2300      	movs	r3, #0
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	e004      	b.n	8006886 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006882:	2301      	movs	r3, #1
 8006884:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006886:	f000 fe75 	bl	8007574 <vPortExitCritical>

	return xReturn;
 800688a:	69fb      	ldr	r3, [r7, #28]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3720      	adds	r7, #32
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	20001380 	.word	0x20001380
 8006898:	20001394 	.word	0x20001394

0800689c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068a0:	4b03      	ldr	r3, [pc, #12]	; (80068b0 <vTaskMissedYield+0x14>)
 80068a2:	2201      	movs	r2, #1
 80068a4:	601a      	str	r2, [r3, #0]
}
 80068a6:	bf00      	nop
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	20001390 	.word	0x20001390

080068b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068bc:	f000 f852 	bl	8006964 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068c0:	4b06      	ldr	r3, [pc, #24]	; (80068dc <prvIdleTask+0x28>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d9f9      	bls.n	80068bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80068c8:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <prvIdleTask+0x2c>)
 80068ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068d8:	e7f0      	b.n	80068bc <prvIdleTask+0x8>
 80068da:	bf00      	nop
 80068dc:	20000eac 	.word	0x20000eac
 80068e0:	e000ed04 	.word	0xe000ed04

080068e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068ea:	2300      	movs	r3, #0
 80068ec:	607b      	str	r3, [r7, #4]
 80068ee:	e00c      	b.n	800690a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4a12      	ldr	r2, [pc, #72]	; (8006944 <prvInitialiseTaskLists+0x60>)
 80068fc:	4413      	add	r3, r2
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe fc8e 	bl	8005220 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3301      	adds	r3, #1
 8006908:	607b      	str	r3, [r7, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b37      	cmp	r3, #55	; 0x37
 800690e:	d9ef      	bls.n	80068f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006910:	480d      	ldr	r0, [pc, #52]	; (8006948 <prvInitialiseTaskLists+0x64>)
 8006912:	f7fe fc85 	bl	8005220 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006916:	480d      	ldr	r0, [pc, #52]	; (800694c <prvInitialiseTaskLists+0x68>)
 8006918:	f7fe fc82 	bl	8005220 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800691c:	480c      	ldr	r0, [pc, #48]	; (8006950 <prvInitialiseTaskLists+0x6c>)
 800691e:	f7fe fc7f 	bl	8005220 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006922:	480c      	ldr	r0, [pc, #48]	; (8006954 <prvInitialiseTaskLists+0x70>)
 8006924:	f7fe fc7c 	bl	8005220 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006928:	480b      	ldr	r0, [pc, #44]	; (8006958 <prvInitialiseTaskLists+0x74>)
 800692a:	f7fe fc79 	bl	8005220 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800692e:	4b0b      	ldr	r3, [pc, #44]	; (800695c <prvInitialiseTaskLists+0x78>)
 8006930:	4a05      	ldr	r2, [pc, #20]	; (8006948 <prvInitialiseTaskLists+0x64>)
 8006932:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006934:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <prvInitialiseTaskLists+0x7c>)
 8006936:	4a05      	ldr	r2, [pc, #20]	; (800694c <prvInitialiseTaskLists+0x68>)
 8006938:	601a      	str	r2, [r3, #0]
}
 800693a:	bf00      	nop
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000eac 	.word	0x20000eac
 8006948:	2000130c 	.word	0x2000130c
 800694c:	20001320 	.word	0x20001320
 8006950:	2000133c 	.word	0x2000133c
 8006954:	20001350 	.word	0x20001350
 8006958:	20001368 	.word	0x20001368
 800695c:	20001334 	.word	0x20001334
 8006960:	20001338 	.word	0x20001338

08006964 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800696a:	e019      	b.n	80069a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800696c:	f000 fdce 	bl	800750c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006970:	4b10      	ldr	r3, [pc, #64]	; (80069b4 <prvCheckTasksWaitingTermination+0x50>)
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	4618      	mov	r0, r3
 800697e:	f7fe fcd9 	bl	8005334 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006982:	4b0d      	ldr	r3, [pc, #52]	; (80069b8 <prvCheckTasksWaitingTermination+0x54>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3b01      	subs	r3, #1
 8006988:	4a0b      	ldr	r2, [pc, #44]	; (80069b8 <prvCheckTasksWaitingTermination+0x54>)
 800698a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800698c:	4b0b      	ldr	r3, [pc, #44]	; (80069bc <prvCheckTasksWaitingTermination+0x58>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3b01      	subs	r3, #1
 8006992:	4a0a      	ldr	r2, [pc, #40]	; (80069bc <prvCheckTasksWaitingTermination+0x58>)
 8006994:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006996:	f000 fded 	bl	8007574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f810 	bl	80069c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069a0:	4b06      	ldr	r3, [pc, #24]	; (80069bc <prvCheckTasksWaitingTermination+0x58>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e1      	bne.n	800696c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069a8:	bf00      	nop
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20001350 	.word	0x20001350
 80069b8:	2000137c 	.word	0x2000137c
 80069bc:	20001364 	.word	0x20001364

080069c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3354      	adds	r3, #84	; 0x54
 80069cc:	4618      	mov	r0, r3
 80069ce:	f001 f8b5 	bl	8007b3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d108      	bne.n	80069ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 ff89 	bl	80078f8 <vPortFree>
				vPortFree( pxTCB );
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 ff86 	bl	80078f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069ec:	e01a      	b.n	8006a24 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d103      	bne.n	8006a00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 ff7d 	bl	80078f8 <vPortFree>
	}
 80069fe:	e011      	b.n	8006a24 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d00c      	beq.n	8006a24 <prvDeleteTCB+0x64>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	b672      	cpsid	i
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	b662      	cpsie	i
 8006a1e:	60fb      	str	r3, [r7, #12]
}
 8006a20:	bf00      	nop
 8006a22:	e7fe      	b.n	8006a22 <prvDeleteTCB+0x62>
	}
 8006a24:	bf00      	nop
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a32:	4b0c      	ldr	r3, [pc, #48]	; (8006a64 <prvResetNextTaskUnblockTime+0x38>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d104      	bne.n	8006a46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <prvResetNextTaskUnblockTime+0x3c>)
 8006a3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a44:	e008      	b.n	8006a58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a46:	4b07      	ldr	r3, [pc, #28]	; (8006a64 <prvResetNextTaskUnblockTime+0x38>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	4a04      	ldr	r2, [pc, #16]	; (8006a68 <prvResetNextTaskUnblockTime+0x3c>)
 8006a56:	6013      	str	r3, [r2, #0]
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	20001334 	.word	0x20001334
 8006a68:	2000139c 	.word	0x2000139c

08006a6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a72:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <xTaskGetSchedulerState+0x34>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d102      	bne.n	8006a80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	607b      	str	r3, [r7, #4]
 8006a7e:	e008      	b.n	8006a92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a80:	4b08      	ldr	r3, [pc, #32]	; (8006aa4 <xTaskGetSchedulerState+0x38>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d102      	bne.n	8006a8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a88:	2302      	movs	r3, #2
 8006a8a:	607b      	str	r3, [r7, #4]
 8006a8c:	e001      	b.n	8006a92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a92:	687b      	ldr	r3, [r7, #4]
	}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	20001388 	.word	0x20001388
 8006aa4:	200013a4 	.word	0x200013a4

08006aa8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d05a      	beq.n	8006b74 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006abe:	4b30      	ldr	r3, [pc, #192]	; (8006b80 <xTaskPriorityDisinherit+0xd8>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d00c      	beq.n	8006ae2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	b672      	cpsid	i
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	b662      	cpsie	i
 8006adc:	60fb      	str	r3, [r7, #12]
}
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10c      	bne.n	8006b04 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aee:	b672      	cpsid	i
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	b662      	cpsie	i
 8006afe:	60bb      	str	r3, [r7, #8]
}
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b08:	1e5a      	subs	r2, r3, #1
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d02c      	beq.n	8006b74 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d128      	bne.n	8006b74 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fe fc04 	bl	8005334 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b44:	4b0f      	ldr	r3, [pc, #60]	; (8006b84 <xTaskPriorityDisinherit+0xdc>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d903      	bls.n	8006b54 <xTaskPriorityDisinherit+0xac>
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	4a0c      	ldr	r2, [pc, #48]	; (8006b84 <xTaskPriorityDisinherit+0xdc>)
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4a09      	ldr	r2, [pc, #36]	; (8006b88 <xTaskPriorityDisinherit+0xe0>)
 8006b62:	441a      	add	r2, r3
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	3304      	adds	r3, #4
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4610      	mov	r0, r2
 8006b6c:	f7fe fb85 	bl	800527a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b70:	2301      	movs	r3, #1
 8006b72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b74:	697b      	ldr	r3, [r7, #20]
	}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000ea8 	.word	0x20000ea8
 8006b84:	20001384 	.word	0x20001384
 8006b88:	20000eac 	.word	0x20000eac

08006b8c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b96:	4b21      	ldr	r3, [pc, #132]	; (8006c1c <prvAddCurrentTaskToDelayedList+0x90>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b9c:	4b20      	ldr	r3, [pc, #128]	; (8006c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fe fbc6 	bl	8005334 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bae:	d10a      	bne.n	8006bc6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d007      	beq.n	8006bc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bb6:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4819      	ldr	r0, [pc, #100]	; (8006c24 <prvAddCurrentTaskToDelayedList+0x98>)
 8006bc0:	f7fe fb5b 	bl	800527a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006bc4:	e026      	b.n	8006c14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4413      	add	r3, r2
 8006bcc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006bce:	4b14      	ldr	r3, [pc, #80]	; (8006c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d209      	bcs.n	8006bf2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bde:	4b12      	ldr	r3, [pc, #72]	; (8006c28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3304      	adds	r3, #4
 8006be8:	4619      	mov	r1, r3
 8006bea:	4610      	mov	r0, r2
 8006bec:	f7fe fb69 	bl	80052c2 <vListInsert>
}
 8006bf0:	e010      	b.n	8006c14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bf2:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	4b0a      	ldr	r3, [pc, #40]	; (8006c20 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	f7fe fb5f 	bl	80052c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d202      	bcs.n	8006c14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c0e:	4a08      	ldr	r2, [pc, #32]	; (8006c30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	6013      	str	r3, [r2, #0]
}
 8006c14:	bf00      	nop
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20001380 	.word	0x20001380
 8006c20:	20000ea8 	.word	0x20000ea8
 8006c24:	20001368 	.word	0x20001368
 8006c28:	20001338 	.word	0x20001338
 8006c2c:	20001334 	.word	0x20001334
 8006c30:	2000139c 	.word	0x2000139c

08006c34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08a      	sub	sp, #40	; 0x28
 8006c38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c3e:	f000 fb15 	bl	800726c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c42:	4b1d      	ldr	r3, [pc, #116]	; (8006cb8 <xTimerCreateTimerTask+0x84>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d021      	beq.n	8006c8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c52:	1d3a      	adds	r2, r7, #4
 8006c54:	f107 0108 	add.w	r1, r7, #8
 8006c58:	f107 030c 	add.w	r3, r7, #12
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fac5 	bl	80051ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	9202      	str	r2, [sp, #8]
 8006c6a:	9301      	str	r3, [sp, #4]
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	2300      	movs	r3, #0
 8006c72:	460a      	mov	r2, r1
 8006c74:	4911      	ldr	r1, [pc, #68]	; (8006cbc <xTimerCreateTimerTask+0x88>)
 8006c76:	4812      	ldr	r0, [pc, #72]	; (8006cc0 <xTimerCreateTimerTask+0x8c>)
 8006c78:	f7ff f890 	bl	8005d9c <xTaskCreateStatic>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	4a11      	ldr	r2, [pc, #68]	; (8006cc4 <xTimerCreateTimerTask+0x90>)
 8006c80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c82:	4b10      	ldr	r3, [pc, #64]	; (8006cc4 <xTimerCreateTimerTask+0x90>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10c      	bne.n	8006cae <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	b672      	cpsid	i
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	b662      	cpsie	i
 8006ca8:	613b      	str	r3, [r7, #16]
}
 8006caa:	bf00      	nop
 8006cac:	e7fe      	b.n	8006cac <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006cae:	697b      	ldr	r3, [r7, #20]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	200013d8 	.word	0x200013d8
 8006cbc:	08007d2c 	.word	0x08007d2c
 8006cc0:	08006e05 	.word	0x08006e05
 8006cc4:	200013dc 	.word	0x200013dc

08006cc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08a      	sub	sp, #40	; 0x28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10c      	bne.n	8006cfa <xTimerGenericCommand+0x32>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	b672      	cpsid	i
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	b662      	cpsie	i
 8006cf4:	623b      	str	r3, [r7, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	e7fe      	b.n	8006cf8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006cfa:	4b1a      	ldr	r3, [pc, #104]	; (8006d64 <xTimerGenericCommand+0x9c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d02a      	beq.n	8006d58 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b05      	cmp	r3, #5
 8006d12:	dc18      	bgt.n	8006d46 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d14:	f7ff feaa 	bl	8006a6c <xTaskGetSchedulerState>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d109      	bne.n	8006d32 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d1e:	4b11      	ldr	r3, [pc, #68]	; (8006d64 <xTimerGenericCommand+0x9c>)
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	f107 0110 	add.w	r1, r7, #16
 8006d26:	2300      	movs	r3, #0
 8006d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d2a:	f7fe fc3d 	bl	80055a8 <xQueueGenericSend>
 8006d2e:	6278      	str	r0, [r7, #36]	; 0x24
 8006d30:	e012      	b.n	8006d58 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d32:	4b0c      	ldr	r3, [pc, #48]	; (8006d64 <xTimerGenericCommand+0x9c>)
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	f107 0110 	add.w	r1, r7, #16
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f7fe fc33 	bl	80055a8 <xQueueGenericSend>
 8006d42:	6278      	str	r0, [r7, #36]	; 0x24
 8006d44:	e008      	b.n	8006d58 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d46:	4b07      	ldr	r3, [pc, #28]	; (8006d64 <xTimerGenericCommand+0x9c>)
 8006d48:	6818      	ldr	r0, [r3, #0]
 8006d4a:	f107 0110 	add.w	r1, r7, #16
 8006d4e:	2300      	movs	r3, #0
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	f7fe fd2f 	bl	80057b4 <xQueueGenericSendFromISR>
 8006d56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3728      	adds	r7, #40	; 0x28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	200013d8 	.word	0x200013d8

08006d68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d72:	4b23      	ldr	r3, [pc, #140]	; (8006e00 <prvProcessExpiredTimer+0x98>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fe fad7 	bl	8005334 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d024      	beq.n	8006dde <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	699a      	ldr	r2, [r3, #24]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	18d1      	adds	r1, r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	6978      	ldr	r0, [r7, #20]
 8006da2:	f000 f8d3 	bl	8006f4c <prvInsertTimerInActiveList>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d021      	beq.n	8006df0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dac:	2300      	movs	r3, #0
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	2300      	movs	r3, #0
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	2100      	movs	r1, #0
 8006db6:	6978      	ldr	r0, [r7, #20]
 8006db8:	f7ff ff86 	bl	8006cc8 <xTimerGenericCommand>
 8006dbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d115      	bne.n	8006df0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	b672      	cpsid	i
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	b662      	cpsie	i
 8006dd8:	60fb      	str	r3, [r7, #12]
}
 8006dda:	bf00      	nop
 8006ddc:	e7fe      	b.n	8006ddc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006de4:	f023 0301 	bic.w	r3, r3, #1
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	6978      	ldr	r0, [r7, #20]
 8006df6:	4798      	blx	r3
}
 8006df8:	bf00      	nop
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	200013d0 	.word	0x200013d0

08006e04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e0c:	f107 0308 	add.w	r3, r7, #8
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 f857 	bl	8006ec4 <prvGetNextExpireTime>
 8006e16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 f803 	bl	8006e28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e22:	f000 f8d5 	bl	8006fd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e26:	e7f1      	b.n	8006e0c <prvTimerTask+0x8>

08006e28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e32:	f7ff fa1d 	bl	8006270 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e36:	f107 0308 	add.w	r3, r7, #8
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 f866 	bl	8006f0c <prvSampleTimeNow>
 8006e40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d130      	bne.n	8006eaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <prvProcessTimerOrBlockTask+0x3c>
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d806      	bhi.n	8006e64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e56:	f7ff fa19 	bl	800628c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e5a:	68f9      	ldr	r1, [r7, #12]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff ff83 	bl	8006d68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e62:	e024      	b.n	8006eae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d008      	beq.n	8006e7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e6a:	4b13      	ldr	r3, [pc, #76]	; (8006eb8 <prvProcessTimerOrBlockTask+0x90>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <prvProcessTimerOrBlockTask+0x50>
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <prvProcessTimerOrBlockTask+0x52>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e7c:	4b0f      	ldr	r3, [pc, #60]	; (8006ebc <prvProcessTimerOrBlockTask+0x94>)
 8006e7e:	6818      	ldr	r0, [r3, #0]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	f7fe ff53 	bl	8005d34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e8e:	f7ff f9fd 	bl	800628c <xTaskResumeAll>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e98:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <prvProcessTimerOrBlockTask+0x98>)
 8006e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	f3bf 8f6f 	isb	sy
}
 8006ea8:	e001      	b.n	8006eae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006eaa:	f7ff f9ef 	bl	800628c <xTaskResumeAll>
}
 8006eae:	bf00      	nop
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	200013d4 	.word	0x200013d4
 8006ebc:	200013d8 	.word	0x200013d8
 8006ec0:	e000ed04 	.word	0xe000ed04

08006ec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ecc:	4b0e      	ldr	r3, [pc, #56]	; (8006f08 <prvGetNextExpireTime+0x44>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <prvGetNextExpireTime+0x16>
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	e000      	b.n	8006edc <prvGetNextExpireTime+0x18>
 8006eda:	2200      	movs	r2, #0
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d105      	bne.n	8006ef4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ee8:	4b07      	ldr	r3, [pc, #28]	; (8006f08 <prvGetNextExpireTime+0x44>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	e001      	b.n	8006ef8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	200013d0 	.word	0x200013d0

08006f0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f14:	f7ff fa5a 	bl	80063cc <xTaskGetTickCount>
 8006f18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <prvSampleTimeNow+0x3c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d205      	bcs.n	8006f30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f24:	f000 f93c 	bl	80071a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e002      	b.n	8006f36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f36:	4a04      	ldr	r2, [pc, #16]	; (8006f48 <prvSampleTimeNow+0x3c>)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	200013e0 	.word	0x200013e0

08006f4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d812      	bhi.n	8006f98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	1ad2      	subs	r2, r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d302      	bcc.n	8006f86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f80:	2301      	movs	r3, #1
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	e01b      	b.n	8006fbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f86:	4b10      	ldr	r3, [pc, #64]	; (8006fc8 <prvInsertTimerInActiveList+0x7c>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4610      	mov	r0, r2
 8006f92:	f7fe f996 	bl	80052c2 <vListInsert>
 8006f96:	e012      	b.n	8006fbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d206      	bcs.n	8006fae <prvInsertTimerInActiveList+0x62>
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d302      	bcc.n	8006fae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	e007      	b.n	8006fbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fae:	4b07      	ldr	r3, [pc, #28]	; (8006fcc <prvInsertTimerInActiveList+0x80>)
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f7fe f982 	bl	80052c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fbe:	697b      	ldr	r3, [r7, #20]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	200013d4 	.word	0x200013d4
 8006fcc:	200013d0 	.word	0x200013d0

08006fd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08e      	sub	sp, #56	; 0x38
 8006fd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fd6:	e0d0      	b.n	800717a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	da1a      	bge.n	8007014 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006fde:	1d3b      	adds	r3, r7, #4
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10c      	bne.n	8007004 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	b672      	cpsid	i
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	b662      	cpsie	i
 8006ffe:	61fb      	str	r3, [r7, #28]
}
 8007000:	bf00      	nop
 8007002:	e7fe      	b.n	8007002 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800700a:	6850      	ldr	r0, [r2, #4]
 800700c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800700e:	6892      	ldr	r2, [r2, #8]
 8007010:	4611      	mov	r1, r2
 8007012:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	f2c0 80af 	blt.w	800717a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d004      	beq.n	8007032 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	3304      	adds	r3, #4
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe f981 	bl	8005334 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007032:	463b      	mov	r3, r7
 8007034:	4618      	mov	r0, r3
 8007036:	f7ff ff69 	bl	8006f0c <prvSampleTimeNow>
 800703a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b09      	cmp	r3, #9
 8007040:	f200 809a 	bhi.w	8007178 <prvProcessReceivedCommands+0x1a8>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <prvProcessReceivedCommands+0x7c>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	08007075 	.word	0x08007075
 8007050:	08007075 	.word	0x08007075
 8007054:	08007075 	.word	0x08007075
 8007058:	080070ed 	.word	0x080070ed
 800705c:	08007101 	.word	0x08007101
 8007060:	0800714f 	.word	0x0800714f
 8007064:	08007075 	.word	0x08007075
 8007068:	08007075 	.word	0x08007075
 800706c:	080070ed 	.word	0x080070ed
 8007070:	08007101 	.word	0x08007101
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800707a:	f043 0301 	orr.w	r3, r3, #1
 800707e:	b2da      	uxtb	r2, r3
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	18d1      	adds	r1, r2, r3
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007094:	f7ff ff5a 	bl	8006f4c <prvInsertTimerInActiveList>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d06d      	beq.n	800717a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d062      	beq.n	800717a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	441a      	add	r2, r3
 80070bc:	2300      	movs	r3, #0
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	2300      	movs	r3, #0
 80070c2:	2100      	movs	r1, #0
 80070c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070c6:	f7ff fdff 	bl	8006cc8 <xTimerGenericCommand>
 80070ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d153      	bne.n	800717a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	b672      	cpsid	i
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	b662      	cpsie	i
 80070e6:	61bb      	str	r3, [r7, #24]
}
 80070e8:	bf00      	nop
 80070ea:	e7fe      	b.n	80070ea <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070f2:	f023 0301 	bic.w	r3, r3, #1
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80070fe:	e03c      	b.n	800717a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	b2da      	uxtb	r2, r3
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10c      	bne.n	800713a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	b672      	cpsid	i
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	b662      	cpsie	i
 8007134:	617b      	str	r3, [r7, #20]
}
 8007136:	bf00      	nop
 8007138:	e7fe      	b.n	8007138 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	699a      	ldr	r2, [r3, #24]
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	18d1      	adds	r1, r2, r3
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007148:	f7ff ff00 	bl	8006f4c <prvInsertTimerInActiveList>
					break;
 800714c:	e015      	b.n	800717a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d103      	bne.n	8007164 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800715c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800715e:	f000 fbcb 	bl	80078f8 <vPortFree>
 8007162:	e00a      	b.n	800717a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800716a:	f023 0301 	bic.w	r3, r3, #1
 800716e:	b2da      	uxtb	r2, r3
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007176:	e000      	b.n	800717a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8007178:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800717a:	4b08      	ldr	r3, [pc, #32]	; (800719c <prvProcessReceivedCommands+0x1cc>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	1d39      	adds	r1, r7, #4
 8007180:	2200      	movs	r2, #0
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe fbb6 	bl	80058f4 <xQueueReceive>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	f47f af24 	bne.w	8006fd8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	3730      	adds	r7, #48	; 0x30
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	200013d8 	.word	0x200013d8

080071a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071a6:	e04a      	b.n	800723e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071a8:	4b2e      	ldr	r3, [pc, #184]	; (8007264 <prvSwitchTimerLists+0xc4>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b2:	4b2c      	ldr	r3, [pc, #176]	; (8007264 <prvSwitchTimerLists+0xc4>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3304      	adds	r3, #4
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe f8b7 	bl	8005334 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d030      	beq.n	800723e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4413      	add	r3, r2
 80071e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d90e      	bls.n	800720c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071fa:	4b1a      	ldr	r3, [pc, #104]	; (8007264 <prvSwitchTimerLists+0xc4>)
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3304      	adds	r3, #4
 8007202:	4619      	mov	r1, r3
 8007204:	4610      	mov	r0, r2
 8007206:	f7fe f85c 	bl	80052c2 <vListInsert>
 800720a:	e018      	b.n	800723e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800720c:	2300      	movs	r3, #0
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	2300      	movs	r3, #0
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	2100      	movs	r1, #0
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7ff fd56 	bl	8006cc8 <xTimerGenericCommand>
 800721c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10c      	bne.n	800723e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	b672      	cpsid	i
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	b662      	cpsie	i
 8007238:	603b      	str	r3, [r7, #0]
}
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800723e:	4b09      	ldr	r3, [pc, #36]	; (8007264 <prvSwitchTimerLists+0xc4>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1af      	bne.n	80071a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007248:	4b06      	ldr	r3, [pc, #24]	; (8007264 <prvSwitchTimerLists+0xc4>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800724e:	4b06      	ldr	r3, [pc, #24]	; (8007268 <prvSwitchTimerLists+0xc8>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a04      	ldr	r2, [pc, #16]	; (8007264 <prvSwitchTimerLists+0xc4>)
 8007254:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007256:	4a04      	ldr	r2, [pc, #16]	; (8007268 <prvSwitchTimerLists+0xc8>)
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	6013      	str	r3, [r2, #0]
}
 800725c:	bf00      	nop
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	200013d0 	.word	0x200013d0
 8007268:	200013d4 	.word	0x200013d4

0800726c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007272:	f000 f94b 	bl	800750c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007276:	4b15      	ldr	r3, [pc, #84]	; (80072cc <prvCheckForValidListAndQueue+0x60>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d120      	bne.n	80072c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800727e:	4814      	ldr	r0, [pc, #80]	; (80072d0 <prvCheckForValidListAndQueue+0x64>)
 8007280:	f7fd ffce 	bl	8005220 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007284:	4813      	ldr	r0, [pc, #76]	; (80072d4 <prvCheckForValidListAndQueue+0x68>)
 8007286:	f7fd ffcb 	bl	8005220 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800728a:	4b13      	ldr	r3, [pc, #76]	; (80072d8 <prvCheckForValidListAndQueue+0x6c>)
 800728c:	4a10      	ldr	r2, [pc, #64]	; (80072d0 <prvCheckForValidListAndQueue+0x64>)
 800728e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007290:	4b12      	ldr	r3, [pc, #72]	; (80072dc <prvCheckForValidListAndQueue+0x70>)
 8007292:	4a10      	ldr	r2, [pc, #64]	; (80072d4 <prvCheckForValidListAndQueue+0x68>)
 8007294:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007296:	2300      	movs	r3, #0
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	4b11      	ldr	r3, [pc, #68]	; (80072e0 <prvCheckForValidListAndQueue+0x74>)
 800729c:	4a11      	ldr	r2, [pc, #68]	; (80072e4 <prvCheckForValidListAndQueue+0x78>)
 800729e:	2110      	movs	r1, #16
 80072a0:	200a      	movs	r0, #10
 80072a2:	f7fe f8db 	bl	800545c <xQueueGenericCreateStatic>
 80072a6:	4603      	mov	r3, r0
 80072a8:	4a08      	ldr	r2, [pc, #32]	; (80072cc <prvCheckForValidListAndQueue+0x60>)
 80072aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072ac:	4b07      	ldr	r3, [pc, #28]	; (80072cc <prvCheckForValidListAndQueue+0x60>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d005      	beq.n	80072c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <prvCheckForValidListAndQueue+0x60>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	490b      	ldr	r1, [pc, #44]	; (80072e8 <prvCheckForValidListAndQueue+0x7c>)
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe fd10 	bl	8005ce0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072c0:	f000 f958 	bl	8007574 <vPortExitCritical>
}
 80072c4:	bf00      	nop
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	200013d8 	.word	0x200013d8
 80072d0:	200013a8 	.word	0x200013a8
 80072d4:	200013bc 	.word	0x200013bc
 80072d8:	200013d0 	.word	0x200013d0
 80072dc:	200013d4 	.word	0x200013d4
 80072e0:	20001484 	.word	0x20001484
 80072e4:	200013e4 	.word	0x200013e4
 80072e8:	08007d34 	.word	0x08007d34

080072ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	3b04      	subs	r3, #4
 80072fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3b04      	subs	r3, #4
 800730a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f023 0201 	bic.w	r2, r3, #1
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3b04      	subs	r3, #4
 800731a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800731c:	4a0c      	ldr	r2, [pc, #48]	; (8007350 <pxPortInitialiseStack+0x64>)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3b14      	subs	r3, #20
 8007326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3b04      	subs	r3, #4
 8007332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f06f 0202 	mvn.w	r2, #2
 800733a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3b20      	subs	r3, #32
 8007340:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007342:	68fb      	ldr	r3, [r7, #12]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	08007355 	.word	0x08007355

08007354 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800735e:	4b14      	ldr	r3, [pc, #80]	; (80073b0 <prvTaskExitError+0x5c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007366:	d00c      	beq.n	8007382 <prvTaskExitError+0x2e>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	b672      	cpsid	i
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	b662      	cpsie	i
 800737c:	60fb      	str	r3, [r7, #12]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <prvTaskExitError+0x2c>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007386:	b672      	cpsid	i
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	b662      	cpsie	i
 8007396:	60bb      	str	r3, [r7, #8]
}
 8007398:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800739a:	bf00      	nop
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0fc      	beq.n	800739c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073a2:	bf00      	nop
 80073a4:	bf00      	nop
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	2000000c 	.word	0x2000000c
	...

080073c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073c0:	4b07      	ldr	r3, [pc, #28]	; (80073e0 <pxCurrentTCBConst2>)
 80073c2:	6819      	ldr	r1, [r3, #0]
 80073c4:	6808      	ldr	r0, [r1, #0]
 80073c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ca:	f380 8809 	msr	PSP, r0
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f04f 0000 	mov.w	r0, #0
 80073d6:	f380 8811 	msr	BASEPRI, r0
 80073da:	4770      	bx	lr
 80073dc:	f3af 8000 	nop.w

080073e0 <pxCurrentTCBConst2>:
 80073e0:	20000ea8 	.word	0x20000ea8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073e4:	bf00      	nop
 80073e6:	bf00      	nop

080073e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073e8:	4808      	ldr	r0, [pc, #32]	; (800740c <prvPortStartFirstTask+0x24>)
 80073ea:	6800      	ldr	r0, [r0, #0]
 80073ec:	6800      	ldr	r0, [r0, #0]
 80073ee:	f380 8808 	msr	MSP, r0
 80073f2:	f04f 0000 	mov.w	r0, #0
 80073f6:	f380 8814 	msr	CONTROL, r0
 80073fa:	b662      	cpsie	i
 80073fc:	b661      	cpsie	f
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	df00      	svc	0
 8007408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800740a:	bf00      	nop
 800740c:	e000ed08 	.word	0xe000ed08

08007410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007416:	4b37      	ldr	r3, [pc, #220]	; (80074f4 <xPortStartScheduler+0xe4>)
 8007418:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	22ff      	movs	r2, #255	; 0xff
 8007426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007438:	b2da      	uxtb	r2, r3
 800743a:	4b2f      	ldr	r3, [pc, #188]	; (80074f8 <xPortStartScheduler+0xe8>)
 800743c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800743e:	4b2f      	ldr	r3, [pc, #188]	; (80074fc <xPortStartScheduler+0xec>)
 8007440:	2207      	movs	r2, #7
 8007442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007444:	e009      	b.n	800745a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007446:	4b2d      	ldr	r3, [pc, #180]	; (80074fc <xPortStartScheduler+0xec>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3b01      	subs	r3, #1
 800744c:	4a2b      	ldr	r2, [pc, #172]	; (80074fc <xPortStartScheduler+0xec>)
 800744e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	b2db      	uxtb	r3, r3
 8007458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800745a:	78fb      	ldrb	r3, [r7, #3]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007462:	2b80      	cmp	r3, #128	; 0x80
 8007464:	d0ef      	beq.n	8007446 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007466:	4b25      	ldr	r3, [pc, #148]	; (80074fc <xPortStartScheduler+0xec>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f1c3 0307 	rsb	r3, r3, #7
 800746e:	2b04      	cmp	r3, #4
 8007470:	d00c      	beq.n	800748c <xPortStartScheduler+0x7c>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	b672      	cpsid	i
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	b662      	cpsie	i
 8007486:	60bb      	str	r3, [r7, #8]
}
 8007488:	bf00      	nop
 800748a:	e7fe      	b.n	800748a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800748c:	4b1b      	ldr	r3, [pc, #108]	; (80074fc <xPortStartScheduler+0xec>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	4a1a      	ldr	r2, [pc, #104]	; (80074fc <xPortStartScheduler+0xec>)
 8007494:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007496:	4b19      	ldr	r3, [pc, #100]	; (80074fc <xPortStartScheduler+0xec>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800749e:	4a17      	ldr	r2, [pc, #92]	; (80074fc <xPortStartScheduler+0xec>)
 80074a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074aa:	4b15      	ldr	r3, [pc, #84]	; (8007500 <xPortStartScheduler+0xf0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a14      	ldr	r2, [pc, #80]	; (8007500 <xPortStartScheduler+0xf0>)
 80074b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074b6:	4b12      	ldr	r3, [pc, #72]	; (8007500 <xPortStartScheduler+0xf0>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a11      	ldr	r2, [pc, #68]	; (8007500 <xPortStartScheduler+0xf0>)
 80074bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074c2:	f000 f8dd 	bl	8007680 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074c6:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <xPortStartScheduler+0xf4>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074cc:	f000 f8fc 	bl	80076c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074d0:	4b0d      	ldr	r3, [pc, #52]	; (8007508 <xPortStartScheduler+0xf8>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a0c      	ldr	r2, [pc, #48]	; (8007508 <xPortStartScheduler+0xf8>)
 80074d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074dc:	f7ff ff84 	bl	80073e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074e0:	f7ff f840 	bl	8006564 <vTaskSwitchContext>
	prvTaskExitError();
 80074e4:	f7ff ff36 	bl	8007354 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	e000e400 	.word	0xe000e400
 80074f8:	200014d4 	.word	0x200014d4
 80074fc:	200014d8 	.word	0x200014d8
 8007500:	e000ed20 	.word	0xe000ed20
 8007504:	2000000c 	.word	0x2000000c
 8007508:	e000ef34 	.word	0xe000ef34

0800750c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	b672      	cpsid	i
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	b662      	cpsie	i
 8007526:	607b      	str	r3, [r7, #4]
}
 8007528:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800752a:	4b10      	ldr	r3, [pc, #64]	; (800756c <vPortEnterCritical+0x60>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3301      	adds	r3, #1
 8007530:	4a0e      	ldr	r2, [pc, #56]	; (800756c <vPortEnterCritical+0x60>)
 8007532:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007534:	4b0d      	ldr	r3, [pc, #52]	; (800756c <vPortEnterCritical+0x60>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d111      	bne.n	8007560 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800753c:	4b0c      	ldr	r3, [pc, #48]	; (8007570 <vPortEnterCritical+0x64>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00c      	beq.n	8007560 <vPortEnterCritical+0x54>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754a:	b672      	cpsid	i
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	b662      	cpsie	i
 800755a:	603b      	str	r3, [r7, #0]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <vPortEnterCritical+0x52>
	}
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	2000000c 	.word	0x2000000c
 8007570:	e000ed04 	.word	0xe000ed04

08007574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800757a:	4b13      	ldr	r3, [pc, #76]	; (80075c8 <vPortExitCritical+0x54>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10c      	bne.n	800759c <vPortExitCritical+0x28>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	b672      	cpsid	i
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	b662      	cpsie	i
 8007596:	607b      	str	r3, [r7, #4]
}
 8007598:	bf00      	nop
 800759a:	e7fe      	b.n	800759a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800759c:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <vPortExitCritical+0x54>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	4a09      	ldr	r2, [pc, #36]	; (80075c8 <vPortExitCritical+0x54>)
 80075a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075a6:	4b08      	ldr	r3, [pc, #32]	; (80075c8 <vPortExitCritical+0x54>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d105      	bne.n	80075ba <vPortExitCritical+0x46>
 80075ae:	2300      	movs	r3, #0
 80075b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	f383 8811 	msr	BASEPRI, r3
}
 80075b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	2000000c 	.word	0x2000000c
 80075cc:	00000000 	.word	0x00000000

080075d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075d0:	f3ef 8009 	mrs	r0, PSP
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	4b15      	ldr	r3, [pc, #84]	; (8007630 <pxCurrentTCBConst>)
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	f01e 0f10 	tst.w	lr, #16
 80075e0:	bf08      	it	eq
 80075e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ea:	6010      	str	r0, [r2, #0]
 80075ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075f4:	b672      	cpsid	i
 80075f6:	f380 8811 	msr	BASEPRI, r0
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	b662      	cpsie	i
 8007604:	f7fe ffae 	bl	8006564 <vTaskSwitchContext>
 8007608:	f04f 0000 	mov.w	r0, #0
 800760c:	f380 8811 	msr	BASEPRI, r0
 8007610:	bc09      	pop	{r0, r3}
 8007612:	6819      	ldr	r1, [r3, #0]
 8007614:	6808      	ldr	r0, [r1, #0]
 8007616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761a:	f01e 0f10 	tst.w	lr, #16
 800761e:	bf08      	it	eq
 8007620:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007624:	f380 8809 	msr	PSP, r0
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop

08007630 <pxCurrentTCBConst>:
 8007630:	20000ea8 	.word	0x20000ea8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007634:	bf00      	nop
 8007636:	bf00      	nop

08007638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	b672      	cpsid	i
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	b662      	cpsie	i
 8007652:	607b      	str	r3, [r7, #4]
}
 8007654:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007656:	f7fe fec9 	bl	80063ec <xTaskIncrementTick>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007660:	4b06      	ldr	r3, [pc, #24]	; (800767c <SysTick_Handler+0x44>)
 8007662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	2300      	movs	r3, #0
 800766a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	f383 8811 	msr	BASEPRI, r3
}
 8007672:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007674:	bf00      	nop
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	e000ed04 	.word	0xe000ed04

08007680 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007684:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <vPortSetupTimerInterrupt+0x34>)
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800768a:	4b0b      	ldr	r3, [pc, #44]	; (80076b8 <vPortSetupTimerInterrupt+0x38>)
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007690:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <vPortSetupTimerInterrupt+0x3c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a0a      	ldr	r2, [pc, #40]	; (80076c0 <vPortSetupTimerInterrupt+0x40>)
 8007696:	fba2 2303 	umull	r2, r3, r2, r3
 800769a:	099b      	lsrs	r3, r3, #6
 800769c:	4a09      	ldr	r2, [pc, #36]	; (80076c4 <vPortSetupTimerInterrupt+0x44>)
 800769e:	3b01      	subs	r3, #1
 80076a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076a2:	4b04      	ldr	r3, [pc, #16]	; (80076b4 <vPortSetupTimerInterrupt+0x34>)
 80076a4:	2207      	movs	r2, #7
 80076a6:	601a      	str	r2, [r3, #0]
}
 80076a8:	bf00      	nop
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	e000e010 	.word	0xe000e010
 80076b8:	e000e018 	.word	0xe000e018
 80076bc:	20000000 	.word	0x20000000
 80076c0:	10624dd3 	.word	0x10624dd3
 80076c4:	e000e014 	.word	0xe000e014

080076c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076d8 <vPortEnableVFP+0x10>
 80076cc:	6801      	ldr	r1, [r0, #0]
 80076ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076d2:	6001      	str	r1, [r0, #0]
 80076d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076d6:	bf00      	nop
 80076d8:	e000ed88 	.word	0xe000ed88

080076dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076e2:	f3ef 8305 	mrs	r3, IPSR
 80076e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b0f      	cmp	r3, #15
 80076ec:	d916      	bls.n	800771c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076ee:	4a19      	ldr	r2, [pc, #100]	; (8007754 <vPortValidateInterruptPriority+0x78>)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4413      	add	r3, r2
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076f8:	4b17      	ldr	r3, [pc, #92]	; (8007758 <vPortValidateInterruptPriority+0x7c>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	7afa      	ldrb	r2, [r7, #11]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d20c      	bcs.n	800771c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	b672      	cpsid	i
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	b662      	cpsie	i
 8007716:	607b      	str	r3, [r7, #4]
}
 8007718:	bf00      	nop
 800771a:	e7fe      	b.n	800771a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800771c:	4b0f      	ldr	r3, [pc, #60]	; (800775c <vPortValidateInterruptPriority+0x80>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007724:	4b0e      	ldr	r3, [pc, #56]	; (8007760 <vPortValidateInterruptPriority+0x84>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	429a      	cmp	r2, r3
 800772a:	d90c      	bls.n	8007746 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	b672      	cpsid	i
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	b662      	cpsie	i
 8007740:	603b      	str	r3, [r7, #0]
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <vPortValidateInterruptPriority+0x68>
	}
 8007746:	bf00      	nop
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	e000e3f0 	.word	0xe000e3f0
 8007758:	200014d4 	.word	0x200014d4
 800775c:	e000ed0c 	.word	0xe000ed0c
 8007760:	200014d8 	.word	0x200014d8

08007764 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b08a      	sub	sp, #40	; 0x28
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800776c:	2300      	movs	r3, #0
 800776e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007770:	f7fe fd7e 	bl	8006270 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007774:	4b5b      	ldr	r3, [pc, #364]	; (80078e4 <pvPortMalloc+0x180>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800777c:	f000 f91a 	bl	80079b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007780:	4b59      	ldr	r3, [pc, #356]	; (80078e8 <pvPortMalloc+0x184>)
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4013      	ands	r3, r2
 8007788:	2b00      	cmp	r3, #0
 800778a:	f040 8092 	bne.w	80078b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d01f      	beq.n	80077d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007794:	2208      	movs	r2, #8
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4413      	add	r3, r2
 800779a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d016      	beq.n	80077d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f023 0307 	bic.w	r3, r3, #7
 80077ac:	3308      	adds	r3, #8
 80077ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00c      	beq.n	80077d4 <pvPortMalloc+0x70>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077be:	b672      	cpsid	i
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	b662      	cpsie	i
 80077ce:	617b      	str	r3, [r7, #20]
}
 80077d0:	bf00      	nop
 80077d2:	e7fe      	b.n	80077d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d06b      	beq.n	80078b2 <pvPortMalloc+0x14e>
 80077da:	4b44      	ldr	r3, [pc, #272]	; (80078ec <pvPortMalloc+0x188>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d866      	bhi.n	80078b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077e4:	4b42      	ldr	r3, [pc, #264]	; (80078f0 <pvPortMalloc+0x18c>)
 80077e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077e8:	4b41      	ldr	r3, [pc, #260]	; (80078f0 <pvPortMalloc+0x18c>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ee:	e004      	b.n	80077fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	429a      	cmp	r2, r3
 8007802:	d903      	bls.n	800780c <pvPortMalloc+0xa8>
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1f1      	bne.n	80077f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800780c:	4b35      	ldr	r3, [pc, #212]	; (80078e4 <pvPortMalloc+0x180>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007812:	429a      	cmp	r2, r3
 8007814:	d04d      	beq.n	80078b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2208      	movs	r2, #8
 800781c:	4413      	add	r3, r2
 800781e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	1ad2      	subs	r2, r2, r3
 8007830:	2308      	movs	r3, #8
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	429a      	cmp	r2, r3
 8007836:	d921      	bls.n	800787c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4413      	add	r3, r2
 800783e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	f003 0307 	and.w	r3, r3, #7
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00c      	beq.n	8007864 <pvPortMalloc+0x100>
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784e:	b672      	cpsid	i
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	b662      	cpsie	i
 800785e:	613b      	str	r3, [r7, #16]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	1ad2      	subs	r2, r2, r3
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007876:	69b8      	ldr	r0, [r7, #24]
 8007878:	f000 f8fe 	bl	8007a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800787c:	4b1b      	ldr	r3, [pc, #108]	; (80078ec <pvPortMalloc+0x188>)
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	4a19      	ldr	r2, [pc, #100]	; (80078ec <pvPortMalloc+0x188>)
 8007888:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800788a:	4b18      	ldr	r3, [pc, #96]	; (80078ec <pvPortMalloc+0x188>)
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	4b19      	ldr	r3, [pc, #100]	; (80078f4 <pvPortMalloc+0x190>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d203      	bcs.n	800789e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007896:	4b15      	ldr	r3, [pc, #84]	; (80078ec <pvPortMalloc+0x188>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a16      	ldr	r2, [pc, #88]	; (80078f4 <pvPortMalloc+0x190>)
 800789c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	4b11      	ldr	r3, [pc, #68]	; (80078e8 <pvPortMalloc+0x184>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	2200      	movs	r2, #0
 80078b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078b2:	f7fe fceb 	bl	800628c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00c      	beq.n	80078da <pvPortMalloc+0x176>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	b672      	cpsid	i
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	b662      	cpsie	i
 80078d4:	60fb      	str	r3, [r7, #12]
}
 80078d6:	bf00      	nop
 80078d8:	e7fe      	b.n	80078d8 <pvPortMalloc+0x174>
	return pvReturn;
 80078da:	69fb      	ldr	r3, [r7, #28]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3728      	adds	r7, #40	; 0x28
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	200050e4 	.word	0x200050e4
 80078e8:	200050f0 	.word	0x200050f0
 80078ec:	200050e8 	.word	0x200050e8
 80078f0:	200050dc 	.word	0x200050dc
 80078f4:	200050ec 	.word	0x200050ec

080078f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d04c      	beq.n	80079a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800790a:	2308      	movs	r3, #8
 800790c:	425b      	negs	r3, r3
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	4413      	add	r3, r2
 8007912:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	4b23      	ldr	r3, [pc, #140]	; (80079ac <vPortFree+0xb4>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4013      	ands	r3, r2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10c      	bne.n	8007940 <vPortFree+0x48>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	b672      	cpsid	i
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	b662      	cpsie	i
 800793a:	60fb      	str	r3, [r7, #12]
}
 800793c:	bf00      	nop
 800793e:	e7fe      	b.n	800793e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00c      	beq.n	8007962 <vPortFree+0x6a>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794c:	b672      	cpsid	i
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	b662      	cpsie	i
 800795c:	60bb      	str	r3, [r7, #8]
}
 800795e:	bf00      	nop
 8007960:	e7fe      	b.n	8007960 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	4b11      	ldr	r3, [pc, #68]	; (80079ac <vPortFree+0xb4>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4013      	ands	r3, r2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d019      	beq.n	80079a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d115      	bne.n	80079a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	4b0b      	ldr	r3, [pc, #44]	; (80079ac <vPortFree+0xb4>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	43db      	mvns	r3, r3
 8007982:	401a      	ands	r2, r3
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007988:	f7fe fc72 	bl	8006270 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <vPortFree+0xb8>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4413      	add	r3, r2
 8007996:	4a06      	ldr	r2, [pc, #24]	; (80079b0 <vPortFree+0xb8>)
 8007998:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800799a:	6938      	ldr	r0, [r7, #16]
 800799c:	f000 f86c 	bl	8007a78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80079a0:	f7fe fc74 	bl	800628c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079a4:	bf00      	nop
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	200050f0 	.word	0x200050f0
 80079b0:	200050e8 	.word	0x200050e8

080079b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80079be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079c0:	4b27      	ldr	r3, [pc, #156]	; (8007a60 <prvHeapInit+0xac>)
 80079c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f003 0307 	and.w	r3, r3, #7
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00c      	beq.n	80079e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3307      	adds	r3, #7
 80079d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0307 	bic.w	r3, r3, #7
 80079da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	4a1f      	ldr	r2, [pc, #124]	; (8007a60 <prvHeapInit+0xac>)
 80079e4:	4413      	add	r3, r2
 80079e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079ec:	4a1d      	ldr	r2, [pc, #116]	; (8007a64 <prvHeapInit+0xb0>)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079f2:	4b1c      	ldr	r3, [pc, #112]	; (8007a64 <prvHeapInit+0xb0>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	4413      	add	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a00:	2208      	movs	r2, #8
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	1a9b      	subs	r3, r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0307 	bic.w	r3, r3, #7
 8007a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4a15      	ldr	r2, [pc, #84]	; (8007a68 <prvHeapInit+0xb4>)
 8007a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a16:	4b14      	ldr	r3, [pc, #80]	; (8007a68 <prvHeapInit+0xb4>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a1e:	4b12      	ldr	r3, [pc, #72]	; (8007a68 <prvHeapInit+0xb4>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	1ad2      	subs	r2, r2, r3
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a34:	4b0c      	ldr	r3, [pc, #48]	; (8007a68 <prvHeapInit+0xb4>)
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	4a0a      	ldr	r2, [pc, #40]	; (8007a6c <prvHeapInit+0xb8>)
 8007a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	4a09      	ldr	r2, [pc, #36]	; (8007a70 <prvHeapInit+0xbc>)
 8007a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a4c:	4b09      	ldr	r3, [pc, #36]	; (8007a74 <prvHeapInit+0xc0>)
 8007a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a52:	601a      	str	r2, [r3, #0]
}
 8007a54:	bf00      	nop
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	200014dc 	.word	0x200014dc
 8007a64:	200050dc 	.word	0x200050dc
 8007a68:	200050e4 	.word	0x200050e4
 8007a6c:	200050ec 	.word	0x200050ec
 8007a70:	200050e8 	.word	0x200050e8
 8007a74:	200050f0 	.word	0x200050f0

08007a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a80:	4b28      	ldr	r3, [pc, #160]	; (8007b24 <prvInsertBlockIntoFreeList+0xac>)
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	e002      	b.n	8007a8c <prvInsertBlockIntoFreeList+0x14>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d8f7      	bhi.n	8007a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d108      	bne.n	8007aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	441a      	add	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	441a      	add	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d118      	bne.n	8007b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <prvInsertBlockIntoFreeList+0xb0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d00d      	beq.n	8007af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	441a      	add	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	e008      	b.n	8007b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007af6:	4b0c      	ldr	r3, [pc, #48]	; (8007b28 <prvInsertBlockIntoFreeList+0xb0>)
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	e003      	b.n	8007b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d002      	beq.n	8007b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b16:	bf00      	nop
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	200050dc 	.word	0x200050dc
 8007b28:	200050e4 	.word	0x200050e4

08007b2c <memset>:
 8007b2c:	4402      	add	r2, r0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d100      	bne.n	8007b36 <memset+0xa>
 8007b34:	4770      	bx	lr
 8007b36:	f803 1b01 	strb.w	r1, [r3], #1
 8007b3a:	e7f9      	b.n	8007b30 <memset+0x4>

08007b3c <_reclaim_reent>:
 8007b3c:	4b29      	ldr	r3, [pc, #164]	; (8007be4 <_reclaim_reent+0xa8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4283      	cmp	r3, r0
 8007b42:	b570      	push	{r4, r5, r6, lr}
 8007b44:	4604      	mov	r4, r0
 8007b46:	d04b      	beq.n	8007be0 <_reclaim_reent+0xa4>
 8007b48:	69c3      	ldr	r3, [r0, #28]
 8007b4a:	b143      	cbz	r3, 8007b5e <_reclaim_reent+0x22>
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d144      	bne.n	8007bdc <_reclaim_reent+0xa0>
 8007b52:	69e3      	ldr	r3, [r4, #28]
 8007b54:	6819      	ldr	r1, [r3, #0]
 8007b56:	b111      	cbz	r1, 8007b5e <_reclaim_reent+0x22>
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f000 f879 	bl	8007c50 <_free_r>
 8007b5e:	6961      	ldr	r1, [r4, #20]
 8007b60:	b111      	cbz	r1, 8007b68 <_reclaim_reent+0x2c>
 8007b62:	4620      	mov	r0, r4
 8007b64:	f000 f874 	bl	8007c50 <_free_r>
 8007b68:	69e1      	ldr	r1, [r4, #28]
 8007b6a:	b111      	cbz	r1, 8007b72 <_reclaim_reent+0x36>
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f000 f86f 	bl	8007c50 <_free_r>
 8007b72:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007b74:	b111      	cbz	r1, 8007b7c <_reclaim_reent+0x40>
 8007b76:	4620      	mov	r0, r4
 8007b78:	f000 f86a 	bl	8007c50 <_free_r>
 8007b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b7e:	b111      	cbz	r1, 8007b86 <_reclaim_reent+0x4a>
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 f865 	bl	8007c50 <_free_r>
 8007b86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007b88:	b111      	cbz	r1, 8007b90 <_reclaim_reent+0x54>
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f000 f860 	bl	8007c50 <_free_r>
 8007b90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007b92:	b111      	cbz	r1, 8007b9a <_reclaim_reent+0x5e>
 8007b94:	4620      	mov	r0, r4
 8007b96:	f000 f85b 	bl	8007c50 <_free_r>
 8007b9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007b9c:	b111      	cbz	r1, 8007ba4 <_reclaim_reent+0x68>
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f000 f856 	bl	8007c50 <_free_r>
 8007ba4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007ba6:	b111      	cbz	r1, 8007bae <_reclaim_reent+0x72>
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f000 f851 	bl	8007c50 <_free_r>
 8007bae:	6a23      	ldr	r3, [r4, #32]
 8007bb0:	b1b3      	cbz	r3, 8007be0 <_reclaim_reent+0xa4>
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007bb8:	4718      	bx	r3
 8007bba:	5949      	ldr	r1, [r1, r5]
 8007bbc:	b941      	cbnz	r1, 8007bd0 <_reclaim_reent+0x94>
 8007bbe:	3504      	adds	r5, #4
 8007bc0:	69e3      	ldr	r3, [r4, #28]
 8007bc2:	2d80      	cmp	r5, #128	; 0x80
 8007bc4:	68d9      	ldr	r1, [r3, #12]
 8007bc6:	d1f8      	bne.n	8007bba <_reclaim_reent+0x7e>
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f000 f841 	bl	8007c50 <_free_r>
 8007bce:	e7c0      	b.n	8007b52 <_reclaim_reent+0x16>
 8007bd0:	680e      	ldr	r6, [r1, #0]
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 f83c 	bl	8007c50 <_free_r>
 8007bd8:	4631      	mov	r1, r6
 8007bda:	e7ef      	b.n	8007bbc <_reclaim_reent+0x80>
 8007bdc:	2500      	movs	r5, #0
 8007bde:	e7ef      	b.n	8007bc0 <_reclaim_reent+0x84>
 8007be0:	bd70      	pop	{r4, r5, r6, pc}
 8007be2:	bf00      	nop
 8007be4:	2000005c 	.word	0x2000005c

08007be8 <__libc_init_array>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	4d0d      	ldr	r5, [pc, #52]	; (8007c20 <__libc_init_array+0x38>)
 8007bec:	4c0d      	ldr	r4, [pc, #52]	; (8007c24 <__libc_init_array+0x3c>)
 8007bee:	1b64      	subs	r4, r4, r5
 8007bf0:	10a4      	asrs	r4, r4, #2
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	42a6      	cmp	r6, r4
 8007bf6:	d109      	bne.n	8007c0c <__libc_init_array+0x24>
 8007bf8:	4d0b      	ldr	r5, [pc, #44]	; (8007c28 <__libc_init_array+0x40>)
 8007bfa:	4c0c      	ldr	r4, [pc, #48]	; (8007c2c <__libc_init_array+0x44>)
 8007bfc:	f000 f880 	bl	8007d00 <_init>
 8007c00:	1b64      	subs	r4, r4, r5
 8007c02:	10a4      	asrs	r4, r4, #2
 8007c04:	2600      	movs	r6, #0
 8007c06:	42a6      	cmp	r6, r4
 8007c08:	d105      	bne.n	8007c16 <__libc_init_array+0x2e>
 8007c0a:	bd70      	pop	{r4, r5, r6, pc}
 8007c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c10:	4798      	blx	r3
 8007c12:	3601      	adds	r6, #1
 8007c14:	e7ee      	b.n	8007bf4 <__libc_init_array+0xc>
 8007c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c1a:	4798      	blx	r3
 8007c1c:	3601      	adds	r6, #1
 8007c1e:	e7f2      	b.n	8007c06 <__libc_init_array+0x1e>
 8007c20:	08007d80 	.word	0x08007d80
 8007c24:	08007d80 	.word	0x08007d80
 8007c28:	08007d80 	.word	0x08007d80
 8007c2c:	08007d84 	.word	0x08007d84

08007c30 <__retarget_lock_acquire_recursive>:
 8007c30:	4770      	bx	lr

08007c32 <__retarget_lock_release_recursive>:
 8007c32:	4770      	bx	lr

08007c34 <memcpy>:
 8007c34:	440a      	add	r2, r1
 8007c36:	4291      	cmp	r1, r2
 8007c38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007c3c:	d100      	bne.n	8007c40 <memcpy+0xc>
 8007c3e:	4770      	bx	lr
 8007c40:	b510      	push	{r4, lr}
 8007c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c4a:	4291      	cmp	r1, r2
 8007c4c:	d1f9      	bne.n	8007c42 <memcpy+0xe>
 8007c4e:	bd10      	pop	{r4, pc}

08007c50 <_free_r>:
 8007c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c52:	2900      	cmp	r1, #0
 8007c54:	d044      	beq.n	8007ce0 <_free_r+0x90>
 8007c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c5a:	9001      	str	r0, [sp, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f1a1 0404 	sub.w	r4, r1, #4
 8007c62:	bfb8      	it	lt
 8007c64:	18e4      	addlt	r4, r4, r3
 8007c66:	f000 f83f 	bl	8007ce8 <__malloc_lock>
 8007c6a:	4a1e      	ldr	r2, [pc, #120]	; (8007ce4 <_free_r+0x94>)
 8007c6c:	9801      	ldr	r0, [sp, #4]
 8007c6e:	6813      	ldr	r3, [r2, #0]
 8007c70:	b933      	cbnz	r3, 8007c80 <_free_r+0x30>
 8007c72:	6063      	str	r3, [r4, #4]
 8007c74:	6014      	str	r4, [r2, #0]
 8007c76:	b003      	add	sp, #12
 8007c78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c7c:	f000 b83a 	b.w	8007cf4 <__malloc_unlock>
 8007c80:	42a3      	cmp	r3, r4
 8007c82:	d908      	bls.n	8007c96 <_free_r+0x46>
 8007c84:	6825      	ldr	r5, [r4, #0]
 8007c86:	1961      	adds	r1, r4, r5
 8007c88:	428b      	cmp	r3, r1
 8007c8a:	bf01      	itttt	eq
 8007c8c:	6819      	ldreq	r1, [r3, #0]
 8007c8e:	685b      	ldreq	r3, [r3, #4]
 8007c90:	1949      	addeq	r1, r1, r5
 8007c92:	6021      	streq	r1, [r4, #0]
 8007c94:	e7ed      	b.n	8007c72 <_free_r+0x22>
 8007c96:	461a      	mov	r2, r3
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	b10b      	cbz	r3, 8007ca0 <_free_r+0x50>
 8007c9c:	42a3      	cmp	r3, r4
 8007c9e:	d9fa      	bls.n	8007c96 <_free_r+0x46>
 8007ca0:	6811      	ldr	r1, [r2, #0]
 8007ca2:	1855      	adds	r5, r2, r1
 8007ca4:	42a5      	cmp	r5, r4
 8007ca6:	d10b      	bne.n	8007cc0 <_free_r+0x70>
 8007ca8:	6824      	ldr	r4, [r4, #0]
 8007caa:	4421      	add	r1, r4
 8007cac:	1854      	adds	r4, r2, r1
 8007cae:	42a3      	cmp	r3, r4
 8007cb0:	6011      	str	r1, [r2, #0]
 8007cb2:	d1e0      	bne.n	8007c76 <_free_r+0x26>
 8007cb4:	681c      	ldr	r4, [r3, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	6053      	str	r3, [r2, #4]
 8007cba:	440c      	add	r4, r1
 8007cbc:	6014      	str	r4, [r2, #0]
 8007cbe:	e7da      	b.n	8007c76 <_free_r+0x26>
 8007cc0:	d902      	bls.n	8007cc8 <_free_r+0x78>
 8007cc2:	230c      	movs	r3, #12
 8007cc4:	6003      	str	r3, [r0, #0]
 8007cc6:	e7d6      	b.n	8007c76 <_free_r+0x26>
 8007cc8:	6825      	ldr	r5, [r4, #0]
 8007cca:	1961      	adds	r1, r4, r5
 8007ccc:	428b      	cmp	r3, r1
 8007cce:	bf04      	itt	eq
 8007cd0:	6819      	ldreq	r1, [r3, #0]
 8007cd2:	685b      	ldreq	r3, [r3, #4]
 8007cd4:	6063      	str	r3, [r4, #4]
 8007cd6:	bf04      	itt	eq
 8007cd8:	1949      	addeq	r1, r1, r5
 8007cda:	6021      	streq	r1, [r4, #0]
 8007cdc:	6054      	str	r4, [r2, #4]
 8007cde:	e7ca      	b.n	8007c76 <_free_r+0x26>
 8007ce0:	b003      	add	sp, #12
 8007ce2:	bd30      	pop	{r4, r5, pc}
 8007ce4:	20005230 	.word	0x20005230

08007ce8 <__malloc_lock>:
 8007ce8:	4801      	ldr	r0, [pc, #4]	; (8007cf0 <__malloc_lock+0x8>)
 8007cea:	f7ff bfa1 	b.w	8007c30 <__retarget_lock_acquire_recursive>
 8007cee:	bf00      	nop
 8007cf0:	2000522c 	.word	0x2000522c

08007cf4 <__malloc_unlock>:
 8007cf4:	4801      	ldr	r0, [pc, #4]	; (8007cfc <__malloc_unlock+0x8>)
 8007cf6:	f7ff bf9c 	b.w	8007c32 <__retarget_lock_release_recursive>
 8007cfa:	bf00      	nop
 8007cfc:	2000522c 	.word	0x2000522c

08007d00 <_init>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	bf00      	nop
 8007d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d06:	bc08      	pop	{r3}
 8007d08:	469e      	mov	lr, r3
 8007d0a:	4770      	bx	lr

08007d0c <_fini>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	bf00      	nop
 8007d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d12:	bc08      	pop	{r3}
 8007d14:	469e      	mov	lr, r3
 8007d16:	4770      	bx	lr
